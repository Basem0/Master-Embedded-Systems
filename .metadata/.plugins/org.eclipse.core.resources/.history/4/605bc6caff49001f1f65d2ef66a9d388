/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// =========================================================================================================
// ================================================ INCLUDES ===============================================
// =========================================================================================================
#include "GPIO.h"
#include "LCD/LCD.h"
#include "KEYPAD/KEYPAD.h"
#include "EXTI/EXTI.h"
#include "USART/USART.h"
// =========================================================================================================
uint8 uart_val;

int main(void)
{
	// Enable clocks for GPIO ports and AFIO
	RCC_GPIOA_CLK_EN();
	RCC_GPIOB_CLK_EN();
	RCC_GPIOC_CLK_EN();
	RCC_AFIO_CLK_EN();

	// UART configuration structure
	USART_Config_t UART1_Config;

	// Initialize the USART1 configuration structure
	UART1_Config.USART_Mode = UART_Mode_TX_RX;
	UART1_Config.BaudRate = UART_BaudRate_9600;
	UART1_Config.Payload_Length = UART_Payload_Length_8B;
	UART1_Config.Parity = UART_Parity_NONE;
	UART1_Config.StopBits = UART_StopBits_1;
	UART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
	UART1_Config.IRQ_Enable = UART_IRQ_Enable_NONE;
	UART1_Config.P_IRQ_CallBack = USART1_Callback;

	// Initialize UART1
	MCAL_UART_Init(USART1, &UART1_Config);

	// Set GPIO pins for UART1
	MCAL_UART_GPIO_Set_Pins(USART1);

	// Variable to store received UART data

	/* Loop forever */
	while(1)
	{
		// Receive data from USART1
		MCAL_UART_ReceiveData(USART1, &uart_val, USART_enable);

		// Send the received data back (echo)
		MCAL_UART_SendData(USART1, uart_val, USART_enable);
	}
}
