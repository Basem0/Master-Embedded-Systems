
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000620  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000620  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002739  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c56  00000000  00000000  00002ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000100b  00000000  00000000  00003c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  00004c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000094b  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000268f  00000000  00000000  00005a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  000080d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
  7a:	0c 94 0e 03 	jmp	0x61c	; 0x61c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
 * 
 * @param _keypad_obj Pointer to the keypad object containing pin configurations.
 * @return Std_ReturnType Returns E_OK if initialization is successful, otherwise E_NOT_OK.
 */
Std_ReturnType keypad_init(const keypad_t *_keypad_obj)
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
    uint8 rows_counter = ZERO_INIT, columns_counter = ZERO_INIT;
    Std_ReturnType ret = E_OK;
    
    if (NULL == _keypad_obj)
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	c9 f0       	breq	.+50     	; 0xbe <keypad_init+0x3c>
  8c:	8c 01       	movw	r16, r24
  8e:	c0 e0       	ldi	r28, 0x00	; 0
  90:	06 c0       	rjmp	.+12     	; 0x9e <keypad_init+0x1c>
    else
    {
        /* init row pins */
        for (rows_counter = ZERO_INIT; rows_counter < ECU_KEYPAD_ROWS; rows_counter++)
        {
            gpio_pin_init(&(_keypad_obj->keypad_row_pins[rows_counter]));
  92:	c8 01       	movw	r24, r16
  94:	8c 0f       	add	r24, r28
  96:	91 1d       	adc	r25, r1
  98:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <gpio_pin_init>
        ret = E_NOT_OK;
    }
    else
    {
        /* init row pins */
        for (rows_counter = ZERO_INIT; rows_counter < ECU_KEYPAD_ROWS; rows_counter++)
  9c:	cf 5f       	subi	r28, 0xFF	; 255
  9e:	c4 30       	cpi	r28, 0x04	; 4
  a0:	c0 f3       	brcs	.-16     	; 0x92 <keypad_init+0x10>
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <keypad_init+0x34>
            gpio_pin_init(&(_keypad_obj->keypad_row_pins[rows_counter]));
        }
        /* init column pins */
        for (columns_counter = ZERO_INIT; columns_counter < ECU_KEYPAD_COLUMNS; columns_counter++)
        {
            gpio_pin_init(&(_keypad_obj->keypad_column_pins[columns_counter]));
  a6:	8c 2f       	mov	r24, r28
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	04 96       	adiw	r24, 0x04	; 4
  ac:	80 0f       	add	r24, r16
  ae:	91 1f       	adc	r25, r17
  b0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <gpio_pin_init>
        for (rows_counter = ZERO_INIT; rows_counter < ECU_KEYPAD_ROWS; rows_counter++)
        {
            gpio_pin_init(&(_keypad_obj->keypad_row_pins[rows_counter]));
        }
        /* init column pins */
        for (columns_counter = ZERO_INIT; columns_counter < ECU_KEYPAD_COLUMNS; columns_counter++)
  b4:	cf 5f       	subi	r28, 0xFF	; 255
  b6:	c4 30       	cpi	r28, 0x04	; 4
  b8:	b0 f3       	brcs	.-20     	; 0xa6 <keypad_init+0x24>
 * @return Std_ReturnType Returns E_OK if initialization is successful, otherwise E_NOT_OK.
 */
Std_ReturnType keypad_init(const keypad_t *_keypad_obj)
{
    uint8 rows_counter = ZERO_INIT, columns_counter = ZERO_INIT;
    Std_ReturnType ret = E_OK;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <keypad_init+0x3e>
    
    if (NULL == _keypad_obj)
    {
        ret = E_NOT_OK;
  be:	80 e0       	ldi	r24, 0x00	; 0
            gpio_pin_init(&(_keypad_obj->keypad_column_pins[columns_counter]));
        }
    }
    
    return ret;
}
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	08 95       	ret

000000c8 <keypad_get_value>:
 * @param _keypad_obj Pointer to the keypad object containing pin configurations.
 * @param value Pointer to a variable where the pressed key value will be stored.
 * @return Std_ReturnType Returns E_OK if a key press is detected, otherwise E_NOT_OK.
 */
Std_ReturnType keypad_get_value(const keypad_t *_keypad_obj, uint8 *value)
{
  c8:	7f 92       	push	r7
  ca:	8f 92       	push	r8
  cc:	9f 92       	push	r9
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
    Std_ReturnType ret = E_OK;
    
    if ((NULL == _keypad_obj) || (NULL == value))
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	09 f4       	brne	.+2      	; 0xee <keypad_get_value+0x26>
  ec:	4b c0       	rjmp	.+150    	; 0x184 <keypad_get_value+0xbc>
  ee:	61 15       	cp	r22, r1
  f0:	71 05       	cpc	r23, r1
  f2:	09 f4       	brne	.+2      	; 0xf6 <keypad_get_value+0x2e>
  f4:	49 c0       	rjmp	.+146    	; 0x188 <keypad_get_value+0xc0>
  f6:	5b 01       	movw	r10, r22
  f8:	7c 01       	movw	r14, r24
        ret = E_NOT_OK;
    }
    else
    {
        uint8 l_rows_counter = ZERO_INIT, l_columns_counter = ZERO_INIT, l_counter = ZERO_INIT;
        uint8 column_logic = ZERO_INIT;
  fa:	19 82       	std	Y+1, r1	; 0x01
        
        for (l_rows_counter = ZERO_INIT; l_rows_counter < ECU_KEYPAD_ROWS; l_rows_counter++)
  fc:	71 2c       	mov	r7, r1
 * @param value Pointer to a variable where the pressed key value will be stored.
 * @return Std_ReturnType Returns E_OK if a key press is detected, otherwise E_NOT_OK.
 */
Std_ReturnType keypad_get_value(const keypad_t *_keypad_obj, uint8 *value)
{
    Std_ReturnType ret = E_OK;
  fe:	01 e0       	ldi	r16, 0x01	; 1
    else
    {
        uint8 l_rows_counter = ZERO_INIT, l_columns_counter = ZERO_INIT, l_counter = ZERO_INIT;
        uint8 column_logic = ZERO_INIT;
        
        for (l_rows_counter = ZERO_INIT; l_rows_counter < ECU_KEYPAD_ROWS; l_rows_counter++)
 100:	3d c0       	rjmp	.+122    	; 0x17c <keypad_get_value+0xb4>
        {
            /* Set all rows to LOW */
            for (l_counter = ZERO_INIT; l_counter < ECU_KEYPAD_ROWS; l_counter++)
            {
                ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]), GPIO_LOW);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	c7 01       	movw	r24, r14
 106:	81 0f       	add	r24, r17
 108:	91 1d       	adc	r25, r1
 10a:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 10e:	08 2f       	mov	r16, r24
        uint8 column_logic = ZERO_INIT;
        
        for (l_rows_counter = ZERO_INIT; l_rows_counter < ECU_KEYPAD_ROWS; l_rows_counter++)
        {
            /* Set all rows to LOW */
            for (l_counter = ZERO_INIT; l_counter < ECU_KEYPAD_ROWS; l_counter++)
 110:	1f 5f       	subi	r17, 0xFF	; 255
 112:	01 c0       	rjmp	.+2      	; 0x116 <keypad_get_value+0x4e>
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	14 30       	cpi	r17, 0x04	; 4
 118:	a0 f3       	brcs	.-24     	; 0x102 <keypad_get_value+0x3a>
            {
                ret = gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_counter]), GPIO_LOW);
            }
            
            /* Set the current row to HIGH */
            gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]), GPIO_HIGH);
 11a:	87 2c       	mov	r8, r7
 11c:	91 2c       	mov	r9, r1
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	c7 01       	movw	r24, r14
 122:	88 0d       	add	r24, r8
 124:	99 1d       	adc	r25, r9
 126:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	83 ed       	ldi	r24, 0xD3	; 211
 12c:	90 e3       	ldi	r25, 0x30	; 48
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <keypad_get_value+0x66>
 132:	00 c0       	rjmp	.+0      	; 0x134 <keypad_get_value+0x6c>
 134:	00 00       	nop
			_delay_ms(50);
            
            /* Check each column for a HIGH signal */
            for (l_columns_counter = ZERO_INIT; l_columns_counter < ECU_KEYPAD_COLUMNS; l_columns_counter++)
 136:	10 e0       	ldi	r17, 0x00	; 0
 138:	1e c0       	rjmp	.+60     	; 0x176 <keypad_get_value+0xae>
            {
                ret = gpio_pin_read_logic(&(_keypad_obj->keypad_column_pins[l_columns_counter]), &column_logic);
 13a:	c1 2e       	mov	r12, r17
 13c:	d1 2c       	mov	r13, r1
 13e:	c6 01       	movw	r24, r12
 140:	04 96       	adiw	r24, 0x04	; 4
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	8e 0d       	add	r24, r14
 14a:	9f 1d       	adc	r25, r15
 14c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <gpio_pin_read_logic>
 150:	08 2f       	mov	r16, r24
                
                if (GPIO_HIGH == column_logic)
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	71 f4       	brne	.+28     	; 0x174 <keypad_get_value+0xac>
                {
                    *value = btn_values[l_rows_counter][l_columns_counter];
 158:	c4 01       	movw	r24, r8
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	8a 57       	subi	r24, 0x7A	; 122
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	fc 01       	movw	r30, r24
 168:	ec 0d       	add	r30, r12
 16a:	fd 1d       	adc	r31, r13
 16c:	80 81       	ld	r24, Z
 16e:	f5 01       	movw	r30, r10
 170:	80 83       	st	Z, r24
 172:	0b c0       	rjmp	.+22     	; 0x18a <keypad_get_value+0xc2>
            /* Set the current row to HIGH */
            gpio_pin_write_logic(&(_keypad_obj->keypad_row_pins[l_rows_counter]), GPIO_HIGH);
			_delay_ms(50);
            
            /* Check each column for a HIGH signal */
            for (l_columns_counter = ZERO_INIT; l_columns_counter < ECU_KEYPAD_COLUMNS; l_columns_counter++)
 174:	1f 5f       	subi	r17, 0xFF	; 255
 176:	14 30       	cpi	r17, 0x04	; 4
 178:	00 f3       	brcs	.-64     	; 0x13a <keypad_get_value+0x72>
    else
    {
        uint8 l_rows_counter = ZERO_INIT, l_columns_counter = ZERO_INIT, l_counter = ZERO_INIT;
        uint8 column_logic = ZERO_INIT;
        
        for (l_rows_counter = ZERO_INIT; l_rows_counter < ECU_KEYPAD_ROWS; l_rows_counter++)
 17a:	73 94       	inc	r7
 17c:	f3 e0       	ldi	r31, 0x03	; 3
 17e:	f7 15       	cp	r31, r7
 180:	48 f6       	brcc	.-110    	; 0x114 <keypad_get_value+0x4c>
 182:	03 c0       	rjmp	.+6      	; 0x18a <keypad_get_value+0xc2>
{
    Std_ReturnType ret = E_OK;
    
    if ((NULL == _keypad_obj) || (NULL == value))
    {
        ret = E_NOT_OK;
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	01 c0       	rjmp	.+2      	; 0x18a <keypad_get_value+0xc2>
 188:	00 e0       	ldi	r16, 0x00	; 0
            }
        }
    }
    
    return ret;
}
 18a:	80 2f       	mov	r24, r16
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	df 90       	pop	r13
 19c:	cf 90       	pop	r12
 19e:	bf 90       	pop	r11
 1a0:	af 90       	pop	r10
 1a2:	9f 90       	pop	r9
 1a4:	8f 90       	pop	r8
 1a6:	7f 90       	pop	r7
 1a8:	08 95       	ret

000001aa <lcd_send_4bits>:
    else{    
        ret = lcd_8bit_set_cursor(lcd, row, column);
        ret = lcd_8bit_send_string(lcd, str);
    }
    return ret;
}
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	8c 01       	movw	r16, r24
 1b2:	c6 2f       	mov	r28, r22
 1b4:	61 70       	andi	r22, 0x01	; 1
 1b6:	02 96       	adiw	r24, 0x02	; 2
 1b8:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 1bc:	c1 fb       	bst	r28, 1
 1be:	66 27       	eor	r22, r22
 1c0:	60 f9       	bld	r22, 0
 1c2:	c8 01       	movw	r24, r16
 1c4:	03 96       	adiw	r24, 0x03	; 3
 1c6:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 1ca:	c2 fb       	bst	r28, 2
 1cc:	66 27       	eor	r22, r22
 1ce:	60 f9       	bld	r22, 0
 1d0:	c8 01       	movw	r24, r16
 1d2:	04 96       	adiw	r24, 0x04	; 4
 1d4:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 1d8:	c3 fb       	bst	r28, 3
 1da:	66 27       	eor	r22, r22
 1dc:	60 f9       	bld	r22, 0
 1de:	c8 01       	movw	r24, r16
 1e0:	05 96       	adiw	r24, 0x05	; 5
 1e2:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <lcd_4bit_send_enable_signal>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_4bit_send_enable_signal+0x12>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_4bit_send_enable_signal+0x14>
 202:	00 00       	nop
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	ce 01       	movw	r24, r28
 208:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <lcd_4bit_send_command>:
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	b1 f0       	breq	.+44     	; 0x248 <lcd_4bit_send_command+0x36>
 21c:	16 2f       	mov	r17, r22
 21e:	ec 01       	movw	r28, r24
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 226:	61 2f       	mov	r22, r17
 228:	62 95       	swap	r22
 22a:	6f 70       	andi	r22, 0x0F	; 15
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_send_4bits>
 232:	ce 01       	movw	r24, r28
 234:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_4bit_send_enable_signal>
 238:	61 2f       	mov	r22, r17
 23a:	ce 01       	movw	r24, r28
 23c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_send_4bits>
 240:	ce 01       	movw	r24, r28
 242:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_4bit_send_enable_signal>
 246:	01 c0       	rjmp	.+2      	; 0x24a <lcd_4bit_send_command+0x38>
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	08 95       	ret

00000252 <lcd_4bit_init>:
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	00 97       	sbiw	r24, 0x00	; 0
 25a:	09 f4       	brne	.+2      	; 0x25e <lcd_4bit_init+0xc>
 25c:	47 c0       	rjmp	.+142    	; 0x2ec <lcd_4bit_init+0x9a>
 25e:	ec 01       	movw	r28, r24
 260:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <gpio_pin_init>
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <gpio_pin_init>
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	08 c0       	rjmp	.+16     	; 0x280 <lcd_4bit_init+0x2e>
 270:	81 2f       	mov	r24, r17
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 96       	adiw	r24, 0x02	; 2
 276:	8c 0f       	add	r24, r28
 278:	9d 1f       	adc	r25, r29
 27a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <gpio_pin_init>
 27e:	1f 5f       	subi	r17, 0xFF	; 255
 280:	14 30       	cpi	r17, 0x04	; 4
 282:	b0 f3       	brcs	.-20     	; 0x270 <lcd_4bit_init+0x1e>
 284:	87 e8       	ldi	r24, 0x87	; 135
 286:	93 e1       	ldi	r25, 0x13	; 19
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_4bit_init+0x36>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd_4bit_init+0x3c>
 28e:	00 00       	nop
 290:	68 e3       	ldi	r22, 0x38	; 56
 292:	ce 01       	movw	r24, r28
 294:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 298:	81 ee       	ldi	r24, 0xE1	; 225
 29a:	94 e0       	ldi	r25, 0x04	; 4
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_4bit_init+0x4a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_4bit_init+0x50>
 2a2:	00 00       	nop
 2a4:	68 e3       	ldi	r22, 0x38	; 56
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2ac:	92 e3       	ldi	r25, 0x32	; 50
 2ae:	9a 95       	dec	r25
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_4bit_init+0x5c>
 2b2:	68 e3       	ldi	r22, 0x38	; 56
 2b4:	ce 01       	movw	r24, r28
 2b6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2c2:	62 e0       	ldi	r22, 0x02	; 2
 2c4:	ce 01       	movw	r24, r28
 2c6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2ca:	66 e0       	ldi	r22, 0x06	; 6
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2d2:	6c e0       	ldi	r22, 0x0C	; 12
 2d4:	ce 01       	movw	r24, r28
 2d6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2da:	68 e2       	ldi	r22, 0x28	; 40
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2e2:	60 e8       	ldi	r22, 0x80	; 128
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <lcd_4bit_init+0x9c>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	08 95       	ret

000002f6 <lcd_4bit_send_char_data>:
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	b1 f0       	breq	.+44     	; 0x32c <lcd_4bit_send_char_data+0x36>
 300:	16 2f       	mov	r17, r22
 302:	ec 01       	movw	r28, r24
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 30a:	61 2f       	mov	r22, r17
 30c:	62 95       	swap	r22
 30e:	6f 70       	andi	r22, 0x0F	; 15
 310:	ce 01       	movw	r24, r28
 312:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_send_4bits>
 316:	ce 01       	movw	r24, r28
 318:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_4bit_send_enable_signal>
 31c:	61 2f       	mov	r22, r17
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_send_4bits>
 324:	ce 01       	movw	r24, r28
 326:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_4bit_send_enable_signal>
 32a:	01 c0       	rjmp	.+2      	; 0x32e <lcd_4bit_send_char_data+0x38>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <lcd_4bit_send_string>:
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	8c 01       	movw	r16, r24
 340:	eb 01       	movw	r28, r22
 342:	89 2b       	or	r24, r25
 344:	51 f0       	breq	.+20     	; 0x35a <lcd_4bit_send_string+0x24>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	04 c0       	rjmp	.+8      	; 0x352 <lcd_4bit_send_string+0x1c>
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	c8 01       	movw	r24, r16
 34e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_4bit_send_char_data>
 352:	68 81       	ld	r22, Y
 354:	61 11       	cpse	r22, r1
 356:	f9 cf       	rjmp	.-14     	; 0x34a <lcd_4bit_send_string+0x14>
 358:	01 c0       	rjmp	.+2      	; 0x35c <lcd_4bit_send_string+0x26>
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

00000366 <lcd_4bit_set_cursor>:
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
    Std_ReturnType ret = E_OK;
    coulmn--;
    switch(row){
 366:	62 30       	cpi	r22, 0x02	; 2
 368:	71 f0       	breq	.+28     	; 0x386 <lcd_4bit_set_cursor+0x20>
 36a:	18 f4       	brcc	.+6      	; 0x372 <lcd_4bit_set_cursor+0xc>
 36c:	61 30       	cpi	r22, 0x01	; 1
 36e:	31 f0       	breq	.+12     	; 0x37c <lcd_4bit_set_cursor+0x16>
 370:	19 c0       	rjmp	.+50     	; 0x3a4 <lcd_4bit_set_cursor+0x3e>
 372:	63 30       	cpi	r22, 0x03	; 3
 374:	69 f0       	breq	.+26     	; 0x390 <lcd_4bit_set_cursor+0x2a>
 376:	64 30       	cpi	r22, 0x04	; 4
 378:	81 f0       	breq	.+32     	; 0x39a <lcd_4bit_set_cursor+0x34>
 37a:	14 c0       	rjmp	.+40     	; 0x3a4 <lcd_4bit_set_cursor+0x3e>
        case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
 37c:	6f e7       	ldi	r22, 0x7F	; 127
 37e:	64 0f       	add	r22, r20
 380:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 384:	08 95       	ret
        case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
 386:	6f eb       	ldi	r22, 0xBF	; 191
 388:	64 0f       	add	r22, r20
 38a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 38e:	08 95       	ret
        case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
 390:	63 e9       	ldi	r22, 0x93	; 147
 392:	64 0f       	add	r22, r20
 394:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 398:	08 95       	ret
        case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
 39a:	63 ed       	ldi	r22, 0xD3	; 211
 39c:	64 0f       	add	r22, r20
 39e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
 3a2:	08 95       	ret
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
    Std_ReturnType ret = E_OK;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
        case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
        case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
        default : ;
    }
    return ret;
}
 3a6:	08 95       	ret

000003a8 <main>:
	.keypad_column_pins[3].logic = GPIO_LOW
};


int main(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	61 97       	sbiw	r28, 0x11	; 17
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
	/* Initialize LCD and Keypad */
	lcd_4bit_init(&_lcd);
 3bc:	88 e6       	ldi	r24, 0x68	; 104
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 29 01 	call	0x252	; 0x252 <lcd_4bit_init>
	keypad_init(&_keypad);
 3c4:	80 e6       	ldi	r24, 0x60	; 96
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>

	char message[11] = "HELLO LCD!";
 3cc:	8b e0       	ldi	r24, 0x0B	; 11
 3ce:	e6 e9       	ldi	r30, 0x96	; 150
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	de 01       	movw	r26, r28
 3d4:	11 96       	adiw	r26, 0x01	; 1
 3d6:	01 90       	ld	r0, Z+
 3d8:	0d 92       	st	X+, r0
 3da:	8a 95       	dec	r24
 3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x2e>
	lcd_4bit_send_string(&_lcd, message);
 3de:	be 01       	movw	r22, r28
 3e0:	6f 5f       	subi	r22, 0xFF	; 255
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	88 e6       	ldi	r24, 0x68	; 104
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_4bit_send_string>

	char input_buffer[5] = {0};  // Buffer to store numeric input from keypad
 3ec:	fe 01       	movw	r30, r28
 3ee:	3c 96       	adiw	r30, 0x0c	; 12
 3f0:	85 e0       	ldi	r24, 0x05	; 5
 3f2:	df 01       	movw	r26, r30
 3f4:	1d 92       	st	X+, r1
 3f6:	8a 95       	dec	r24
 3f8:	e9 f7       	brne	.-6      	; 0x3f4 <main+0x4c>
	int buffer_index = 0;        // Index to track buffer position
 3fa:	00 e0       	ldi	r16, 0x00	; 0
 3fc:	10 e0       	ldi	r17, 0x00	; 0
	char key;
	
	while (1)
	{
		/* Scan keypad for input */
		keypad_get_value(&_keypad,&key);
 3fe:	be 01       	movw	r22, r28
 400:	6f 5e       	subi	r22, 0xEF	; 239
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	80 e6       	ldi	r24, 0x60	; 96
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 64 00 	call	0xc8	; 0xc8 <keypad_get_value>

		if (key >= '0' && key <= '9')
 40c:	89 89       	ldd	r24, Y+17	; 0x11
 40e:	90 ed       	ldi	r25, 0xD0	; 208
 410:	98 0f       	add	r25, r24
 412:	9a 30       	cpi	r25, 0x0A	; 10
 414:	d0 f5       	brcc	.+116    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		{
			/* Valid numeric key pressed, store in buffer and display on LCD */
			input_buffer[buffer_index++] = key;
 416:	78 01       	movw	r14, r16
 418:	bf ef       	ldi	r27, 0xFF	; 255
 41a:	eb 1a       	sub	r14, r27
 41c:	fb 0a       	sbc	r15, r27
 41e:	ec e0       	ldi	r30, 0x0C	; 12
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ec 0f       	add	r30, r28
 424:	fd 1f       	adc	r31, r29
 426:	e0 0f       	add	r30, r16
 428:	f1 1f       	adc	r31, r17
 42a:	80 83       	st	Z, r24
			input_buffer[buffer_index] = '\0';  // Ensure null-terminated string
 42c:	ec e0       	ldi	r30, 0x0C	; 12
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	ec 0f       	add	r30, r28
 432:	fd 1f       	adc	r31, r29
 434:	ee 0d       	add	r30, r14
 436:	ff 1d       	adc	r31, r15
 438:	10 82       	st	Z, r1

			/* Display the number on LCD */
			lcd_4bit_send_command(&_lcd,_LCD_CLEAR);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	88 e6       	ldi	r24, 0x68	; 104
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 09 01 	call	0x212	; 0x212 <lcd_4bit_send_command>
			lcd_4bit_set_cursor(&_lcd, 1, 1);  // Move cursor to the second line
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	88 e6       	ldi	r24, 0x68	; 104
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 b3 01 	call	0x366	; 0x366 <lcd_4bit_set_cursor>
			lcd_4bit_send_string(&_lcd, input_buffer);
 450:	be 01       	movw	r22, r28
 452:	64 5f       	subi	r22, 0xF4	; 244
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	88 e6       	ldi	r24, 0x68	; 104
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_4bit_send_string>

			/* Reset buffer after displaying */
			if (buffer_index >= 4)  // Assuming a maximum of 4 digits
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	e8 16       	cp	r14, r24
 462:	f1 04       	cpc	r15, r1
 464:	5c f4       	brge	.+22     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		keypad_get_value(&_keypad,&key);

		if (key >= '0' && key <= '9')
		{
			/* Valid numeric key pressed, store in buffer and display on LCD */
			input_buffer[buffer_index++] = key;
 466:	87 01       	movw	r16, r14
 468:	10 c0       	rjmp	.+32     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			/* Reset buffer after displaying */
			if (buffer_index >= 4)  // Assuming a maximum of 4 digits
			{
				buffer_index = 0;
				for (int i = 0; i < 5; ++i)
				input_buffer[i] = 0;
 46a:	ec e0       	ldi	r30, 0x0C	; 12
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ec 0f       	add	r30, r28
 470:	fd 1f       	adc	r31, r29
 472:	e8 0f       	add	r30, r24
 474:	f9 1f       	adc	r31, r25
 476:	10 82       	st	Z, r1

			/* Reset buffer after displaying */
			if (buffer_index >= 4)  // Assuming a maximum of 4 digits
			{
				buffer_index = 0;
				for (int i = 0; i < 5; ++i)
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	85 30       	cpi	r24, 0x05	; 5
 482:	91 05       	cpc	r25, r1
 484:	94 f3       	brlt	.-28     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			lcd_4bit_send_string(&_lcd, input_buffer);

			/* Reset buffer after displaying */
			if (buffer_index >= 4)  // Assuming a maximum of 4 digits
			{
				buffer_index = 0;
 486:	00 e0       	ldi	r16, 0x00	; 0
 488:	10 e0       	ldi	r17, 0x00	; 0
 48a:	a7 ea       	ldi	r26, 0xA7	; 167
 48c:	b1 e6       	ldi	r27, 0x61	; 97
 48e:	11 97       	sbiw	r26, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
 496:	b3 cf       	rjmp	.-154    	; 0x3fe <main+0x56>

00000498 <gpio_pin_direction_init>:
    else
    {
        TOGGLE_BIT(*port_registers[_pin_config->port], _pin_config->pin);
    }
    return ret;
}
 498:	fc 01       	movw	r30, r24
 49a:	89 2b       	or	r24, r25
 49c:	d1 f1       	breq	.+116    	; 0x512 <gpio_pin_direction_init+0x7a>
 49e:	20 81       	ld	r18, Z
 4a0:	26 95       	lsr	r18
 4a2:	26 95       	lsr	r18
 4a4:	26 95       	lsr	r18
 4a6:	27 70       	andi	r18, 0x07	; 7
 4a8:	80 81       	ld	r24, Z
 4aa:	86 fb       	bst	r24, 6
 4ac:	99 27       	eor	r25, r25
 4ae:	90 f9       	bld	r25, 0
 4b0:	86 ff       	sbrs	r24, 6
 4b2:	18 c0       	rjmp	.+48     	; 0x4e4 <gpio_pin_direction_init+0x4c>
 4b4:	91 30       	cpi	r25, 0x01	; 1
 4b6:	79 f5       	brne	.+94     	; 0x516 <gpio_pin_direction_init+0x7e>
 4b8:	e8 2f       	mov	r30, r24
 4ba:	e7 70       	andi	r30, 0x07	; 7
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	ee 0f       	add	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	ea 58       	subi	r30, 0x8A	; 138
 4c4:	ff 4f       	sbci	r31, 0xFF	; 255
 4c6:	01 90       	ld	r0, Z+
 4c8:	f0 81       	ld	r31, Z
 4ca:	e0 2d       	mov	r30, r0
 4cc:	30 81       	ld	r19, Z
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <gpio_pin_direction_init+0x40>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	2a 95       	dec	r18
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <gpio_pin_direction_init+0x3c>
 4dc:	83 2b       	or	r24, r19
 4de:	80 83       	st	Z, r24
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret
 4e4:	e0 81       	ld	r30, Z
 4e6:	e7 70       	andi	r30, 0x07	; 7
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	ee 0f       	add	r30, r30
 4ec:	ff 1f       	adc	r31, r31
 4ee:	ea 58       	subi	r30, 0x8A	; 138
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	01 90       	ld	r0, Z+
 4f4:	f0 81       	ld	r31, Z
 4f6:	e0 2d       	mov	r30, r0
 4f8:	30 81       	ld	r19, Z
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <gpio_pin_direction_init+0x6c>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	2a 95       	dec	r18
 506:	e2 f7       	brpl	.-8      	; 0x500 <gpio_pin_direction_init+0x68>
 508:	80 95       	com	r24
 50a:	83 23       	and	r24, r19
 50c:	80 83       	st	Z, r24
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	08 95       	ret

0000051a <gpio_pin_write_logic>:
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	09 f4       	brne	.+2      	; 0x520 <gpio_pin_write_logic+0x6>
 51e:	42 c0       	rjmp	.+132    	; 0x5a4 <gpio_pin_write_logic+0x8a>
 520:	66 23       	and	r22, r22
 522:	09 f1       	breq	.+66     	; 0x566 <gpio_pin_write_logic+0x4c>
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	09 f0       	breq	.+2      	; 0x52a <gpio_pin_write_logic+0x10>
 528:	3f c0       	rjmp	.+126    	; 0x5a8 <gpio_pin_write_logic+0x8e>
 52a:	fc 01       	movw	r30, r24
 52c:	80 81       	ld	r24, Z
 52e:	e8 2f       	mov	r30, r24
 530:	e7 70       	andi	r30, 0x07	; 7
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	e2 59       	subi	r30, 0x92	; 146
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	01 90       	ld	r0, Z+
 53e:	f0 81       	ld	r31, Z
 540:	e0 2d       	mov	r30, r0
 542:	40 81       	ld	r20, Z
 544:	86 95       	lsr	r24
 546:	86 95       	lsr	r24
 548:	86 95       	lsr	r24
 54a:	87 70       	andi	r24, 0x07	; 7
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <gpio_pin_write_logic+0x3e>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	8a 95       	dec	r24
 55a:	e2 f7       	brpl	.-8      	; 0x554 <gpio_pin_write_logic+0x3a>
 55c:	cb 01       	movw	r24, r22
 55e:	84 2b       	or	r24, r20
 560:	80 83       	st	Z, r24
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	08 95       	ret
 566:	fc 01       	movw	r30, r24
 568:	80 81       	ld	r24, Z
 56a:	e8 2f       	mov	r30, r24
 56c:	e7 70       	andi	r30, 0x07	; 7
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	e2 59       	subi	r30, 0x92	; 146
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	01 90       	ld	r0, Z+
 57a:	f0 81       	ld	r31, Z
 57c:	e0 2d       	mov	r30, r0
 57e:	40 81       	ld	r20, Z
 580:	86 95       	lsr	r24
 582:	86 95       	lsr	r24
 584:	86 95       	lsr	r24
 586:	87 70       	andi	r24, 0x07	; 7
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <gpio_pin_write_logic+0x7a>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	8a 95       	dec	r24
 596:	e2 f7       	brpl	.-8      	; 0x590 <gpio_pin_write_logic+0x76>
 598:	cb 01       	movw	r24, r22
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	80 83       	st	Z, r24
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	08 95       	ret
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	08 95       	ret
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	08 95       	ret

000005ac <gpio_pin_read_logic>:
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	f9 f0       	breq	.+62     	; 0x5ee <gpio_pin_read_logic+0x42>
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	f1 f0       	breq	.+60     	; 0x5f2 <gpio_pin_read_logic+0x46>
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 81       	ld	r18, Z
 5ba:	e2 2f       	mov	r30, r18
 5bc:	e7 70       	andi	r30, 0x07	; 7
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	ee 0f       	add	r30, r30
 5c2:	ff 1f       	adc	r31, r31
 5c4:	e2 58       	subi	r30, 0x82	; 130
 5c6:	ff 4f       	sbci	r31, 0xFF	; 255
 5c8:	01 90       	ld	r0, Z+
 5ca:	f0 81       	ld	r31, Z
 5cc:	e0 2d       	mov	r30, r0
 5ce:	80 81       	ld	r24, Z
 5d0:	26 95       	lsr	r18
 5d2:	26 95       	lsr	r18
 5d4:	26 95       	lsr	r18
 5d6:	27 70       	andi	r18, 0x07	; 7
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <gpio_pin_read_logic+0x34>
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <gpio_pin_read_logic+0x30>
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	fb 01       	movw	r30, r22
 5e8:	80 83       	st	Z, r24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <gpio_pin_init>:
 * 
 * @param _pin_config Pointer to pin configuration structure
 * @return Std_ReturnType E_OK if successful, E_NOT_OK if error
 */
Std_ReturnType gpio_pin_init(const pin_config_t *_pin_config)
{
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
    Std_ReturnType ret = E_OK;
    if ((NULL == _pin_config) || (_pin_config->pin > (PORT_PIN_MAX_NUMBER - 1)))
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	59 f0       	breq	.+22     	; 0x614 <gpio_pin_init+0x1e>
 5fe:	ec 01       	movw	r28, r24
    {
        ret = E_NOT_OK;
    }
    else
    {
        ret = gpio_pin_direction_init(_pin_config);
 600:	0e 94 4c 02 	call	0x498	; 0x498 <gpio_pin_direction_init>
        ret = gpio_pin_write_logic(_pin_config, _pin_config->logic);
 604:	68 81       	ld	r22, Y
 606:	67 fb       	bst	r22, 7
 608:	66 27       	eor	r22, r22
 60a:	60 f9       	bld	r22, 0
 60c:	ce 01       	movw	r24, r28
 60e:	0e 94 8d 02 	call	0x51a	; 0x51a <gpio_pin_write_logic>
 612:	01 c0       	rjmp	.+2      	; 0x616 <gpio_pin_init+0x20>
Std_ReturnType gpio_pin_init(const pin_config_t *_pin_config)
{
    Std_ReturnType ret = E_OK;
    if ((NULL == _pin_config) || (_pin_config->pin > (PORT_PIN_MAX_NUMBER - 1)))
    {
        ret = E_NOT_OK;
 614:	80 e0       	ldi	r24, 0x00	; 0
    {
        ret = gpio_pin_direction_init(_pin_config);
        ret = gpio_pin_write_logic(_pin_config, _pin_config->logic);
    }
    return ret;
}
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <_exit>:
 61c:	f8 94       	cli

0000061e <__stop_program>:
 61e:	ff cf       	rjmp	.-2      	; 0x61e <__stop_program>
