/*
 * STM32F103C8.h
 *
 *  Created on: Jul 21, 2024
 *      Author: Ahmed Basem
 */

#ifndef LIBS_STM32F103C8_H_
#define LIBS_STM32F103C8_H_

// =========================================================================================================
// ================================================ INCLUDES ===============================================
// =========================================================================================================
#include <stdio.h>
#include <stdlib.h>
#include "UTILS.h"
#include "PLATFORM_TYPES.h"

// =========================================================================================================
// ================================================ CONFIGS ================================================
// =========================================================================================================
#define F_CPU 10000000UL

// ====================================== Base addresses for Memories ======================================
#define FLASH_Memory_BASE           		  0x08000000UL
#define System_Memory_BASE             		  0x1FFFF000UL
#define SRAM_BASE                		      0x20000000UL
#define Peripherals_BASE               		  0x40000000UL
#define Cortex_M3_Internal_Peripherals_BASE   0xE0000000UL

// =========================================== NVIC register map ===========================================
#define NVIC_Base					(0xE000E100UL)
#define NVIC_ISER0					*(vuint32 *) (NVIC_Base + 0x0 )
#define NVIC_ISER1					*(vuint32 *)(NVIC_Base + 0x4)
#define NVIC_ISER2					*(vuint32 *)(NVIC_Base + 0x8)
#define NVIC_ICER0					*(vuint32 *)(NVIC_Base + 0x80)
#define NVIC_ICER1					*(vuint32 *)(NVIC_Base + 0x84)
#define NVIC_ICER2					*(vuint32 *)(NVIC_Base + 0x88)

// ================================== Base addresses for AHB Peripherals ===================================
#define RCC_BASE                    (Peripherals_BASE + 0x00021000UL)

// ================================== Base addresses for APB2 Peripherals ==================================
#define GPIOA_BASE                     (Peripherals_BASE + 0x00010800UL)
#define GPIOB_BASE                     (Peripherals_BASE + 0x00010C00UL)
#define GPIOC_BASE                     (Peripherals_BASE + 0x00011000UL)
#define GPIOD_BASE                     (Peripherals_BASE + 0x00011400UL)
#define GPIOE_BASE                     (Peripherals_BASE + 0x00011800UL)
#define AFIO_BASE                      (Peripherals_BASE + 0x00010000UL)
#define EXTI_BASE                      (Peripherals_BASE + 0x00010400UL)
#define USART1_BASE                    (Peripherals_BASE + 0x00013800UL)
#define SPI1_BASE                      (Peripherals_BASE + 0x00013000UL)
#define I2C1_BASE                      (0x40005400UL)
#define I2C2_BASE                      (0x40005800UL)

// ================================== Base addresses for APB1 Peripherals ==================================
#define USART2_BASE             (Peripherals_BASE + 0x00004400UL)
#define USART3_BASE             (Peripherals_BASE + 0x00004800UL)
#define SPI2_BASE               (Peripherals_BASE + 0x00003800UL)


// =========================================================================================================
// ======================================= Peripheral register: GPIO =======================================
// =========================================================================================================
typedef struct {
	vuint32 CRL;
	vuint32 CRH;
	vuint32 IDR;
	vuint32 ODR;
	vuint32 BSRR;
    vuint32 BRR;
    vuint32 LCKR;
} GPIO_TypeDef;

// =========================================================================================================
// ======================================= Peripheral register: RCC ========================================
// =========================================================================================================
typedef struct {
	vuint32 CR;
	vuint32 CFGR;
	vuint32 CIR;
	vuint32 APB2RSTR;
	vuint32 APB1RSTR;
	vuint32 AHBENR;
    vuint32 APB2ENR;
    vuint32 APB1ENR;
    vuint32 BDCR;
    vuint32 CSR;
    vuint32 AHBSTR;
    vuint32 CFGR2;
} RCC_TypeDef;

// =========================================================================================================
// ======================================= Peripheral register: EXTI =======================================
// =========================================================================================================
typedef struct {
    vuint32 IMR;
    vuint32 EMR;
    vuint32 RTSR;
    vuint32 FTSR;
    vuint32 SWIER;
    vuint32 PR;
} EXTI_TypeDef;

// =========================================================================================================
// ======================================= Peripheral register: AFIO =======================================
// =========================================================================================================
typedef struct {
    vuint32 EVCR;
    vuint32 MAPR;
    vuint32 EXTICR[4];
    uint32 RESERVED0;
    vuint32 MAPR2;
} AFIO_TypeDef;

// =========================================================================================================
// ========================================= Peripheral Instantnces ========================================
// =========================================================================================================
#define GPIOA                         ((GPIO_TypeDef *)GPIOA_BASE)
#define GPIOB                         ((GPIO_TypeDef *)GPIOB_BASE)
#define GPIOC                         ((GPIO_TypeDef *)GPIOC_BASE)
#define GPIOD                         ((GPIO_TypeDef *)GPIOD_BASE)
#define GPIOE                         ((GPIO_TypeDef *)GPIOE_BASE)
#define RCC                           ((RCC_TypeDef *)RCC_BASE)
#define AFIO                          ((AFIO_TypeDef *)AFIO_BASE)
#define EXTI                          ((EXTI_TypeDef *)EXTI_BASE)

// =========================================================================================================
// ========================================== Enable clock MACROS ==========================================
// =========================================================================================================
#define RCC_GPIOA_CLK_EN()            (RCC->APB2ENR |= (1 << 2))
#define RCC_GPIOB_CLK_EN()            (RCC->APB2ENR |= (1 << 3))
#define RCC_GPIOC_CLK_EN()            (RCC->APB2ENR |= (1 << 4))
#define RCC_GPIOD_CLK_EN()            (RCC->APB2ENR |= (1 << 5))
#define RCC_GPIOE_CLK_EN()            (RCC->APB2ENR |= (1 << 6))

#define RCC_AFIO_CLK_EN()			  (RCC->APB2ENR |= (1 << 0))

#define RCC_USART1_CLK_EN()			  (RCC->APB2ENR |= (1 << 14))
#define RCC_USART2_CLK_EN()			  (RCC->APB1ENR |= (1 << 17))
#define RCC_USART3_CLK_EN()			  (RCC->APB1ENR |= (1 << 18))

#define RCC_SPI1_CLK_EN()			  (RCC->APB2ENR |= (1 << 12))
#define RCC_SPI2_CLK_EN()			  (RCC->APB1ENR |= (1 << 14))

#define RCC_I2C1_CLK_EN()			  (RCC->APB1ENR |= (1 << 21))
#define RCC_I2C2_CLK_EN()			  (RCC->APB1ENR |= (1 << 22))

#define RCC_USART1_Reset()			  (RCC->APB2RSTR |= (1 << 14))
#define RCC_USART2_Reset()			  (RCC->APB1RSTR |= (1 << 17))
#define RCC_USART3_Reset()			  (RCC->APB1RSTR |= (1 << 18))

#define RCC_SPI1_Reset()	 `		  (RCC->APB2RSTR |= (1 << 12))
#define RCC_SPI2_Reset()			  (RCC->APB1RSTR |= (1 << 14))

#define RCC_I2C1_Reset()	   		  (RCC->APB1RSTR |= (1 << 21))
#define RCC_I2C2_Reset()			  (RCC->APB1RSTR |= (1 << 22))

// =========================================================================================================
// ================================================== IVT ==================================================
// =========================================================================================================

//=================================================== EXTI =================================================
#define 	EXTI0_IRQ			6
#define 	EXTI1_IRQ			7
#define 	EXTI2_IRQ			8
#define 	EXTI3_IRQ			9
#define 	EXTI4_IRQ			10
#define 	EXTI5_IRQ			23
#define 	EXTI6_IRQ			23
#define 	EXTI7_IRQ			23
#define 	EXTI8_IRQ			23
#define 	EXTI9_IRQ			23
#define 	EXTI10_IRQ			40
#define 	EXTI11_IRQ			40
#define 	EXTI12_IRQ			40
#define 	EXTI13_IRQ			40
#define 	EXTI14_IRQ			40
#define 	EXTI15_IRQ			40

#define 	USART1_IRQ			37
#define 	USART2_IRQ			38
#define 	USART3_IRQ			39

#define 	SPI1_IRQ			35
#define 	SPI2_IRQ			36

#define 	I2C1_EV_IRQ			31
#define 	I2C1_ER_IRQ			32
#define 	I2C2_EV_IRQ			33
#define 	I2C2_ER_IRQ			34


#endif /* LIBS_STM32F103C8_H_ */
