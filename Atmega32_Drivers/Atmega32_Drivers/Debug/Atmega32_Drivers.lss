
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000b5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025e4  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000124f  00000000  00000000  00003fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  0000522c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092c  00000000  00000000  00005604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c85  00000000  00000000  00005f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006bb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_12>
  34:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_13>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_15>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	d6 01       	movw	r26, r12
  56:	07 02       	muls	r16, r23
  58:	38 02       	muls	r19, r24
  5a:	69 02       	muls	r22, r25
  5c:	9a 02       	muls	r25, r26
  5e:	cb 02       	muls	r28, r27
  60:	fc 02       	muls	r31, r28
  62:	2d 03       	fmul	r18, r21
  64:	5e 03       	fmul	r21, r22
  66:	88 03       	fmulsu	r16, r16
  68:	94 03       	fmuls	r17, r20
  6a:	a0 03       	fmuls	r18, r16
  6c:	ac 03       	fmulsu	r18, r20
  6e:	b8 03       	fmulsu	r19, r16
  70:	c4 03       	fmuls	r20, r20
  72:	d0 03       	fmuls	r21, r16
  74:	dc 03       	fmulsu	r21, r20

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a6 36       	cpi	r26, 0x66	; 102
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 92 01 	call	0x324	; 0x324 <main>
  96:	0c 94 71 05 	jmp	0xae2	; 0xae2 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <LCD_4BIT_INIT>:
		if (position < 16 && position >= 0)
		{
			HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
		}
	}
}
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	c2 e6       	ldi	r28, 0x62	; 98
  a6:	d0 e0       	ldi	r29, 0x00	; 0
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	88 83       	st	Y, r24
  ac:	12 e0       	ldi	r17, 0x02	; 2
  ae:	19 83       	std	Y+1, r17	; 0x01
  b0:	be 01       	movw	r22, r28
  b2:	83 e3       	ldi	r24, 0x33	; 51
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	88 83       	st	Y, r24
  be:	19 83       	std	Y+1, r17	; 0x01
  c0:	be 01       	movw	r22, r28
  c2:	83 e3       	ldi	r24, 0x33	; 51
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
  ca:	87 e0       	ldi	r24, 0x07	; 7
  cc:	88 83       	st	Y, r24
  ce:	19 83       	std	Y+1, r17	; 0x01
  d0:	be 01       	movw	r22, r28
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
  da:	18 82       	st	Y, r1
  dc:	19 83       	std	Y+1, r17	; 0x01
  de:	be 01       	movw	r22, r28
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 83       	st	Y, r24
  ec:	19 83       	std	Y+1, r17	; 0x01
  ee:	be 01       	movw	r22, r28
  f0:	83 e3       	ldi	r24, 0x33	; 51
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
  f8:	18 83       	st	Y, r17
  fa:	19 83       	std	Y+1, r17	; 0x01
  fc:	be 01       	movw	r22, r28
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	88 83       	st	Y, r24
 10a:	19 83       	std	Y+1, r17	; 0x01
 10c:	be 01       	movw	r22, r28
 10e:	83 e3       	ldi	r24, 0x33	; 51
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 c6 01 	call	0x38c	; 0x38c <MCAL_GPIO_Init>
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	67 e0       	ldi	r22, 0x07	; 7
 11a:	83 e3       	ldi	r24, 0x33	; 51
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	65 e0       	ldi	r22, 0x05	; 5
 126:	83 e3       	ldi	r24, 0x33	; 51
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	66 e0       	ldi	r22, 0x06	; 6
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	08 95       	ret

00000142 <HAL_4BIT_LCD_KICK>:
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	67 e0       	ldi	r22, 0x07	; 7
 146:	83 e3       	ldi	r24, 0x33	; 51
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 14e:	83 ef       	ldi	r24, 0xF3	; 243
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <HAL_4BIT_LCD_KICK+0x10>
 156:	00 c0       	rjmp	.+0      	; 0x158 <HAL_4BIT_LCD_KICK+0x16>
 158:	00 00       	nop
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	67 e0       	ldi	r22, 0x07	; 7
 15e:	83 e3       	ldi	r24, 0x33	; 51
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 166:	08 95       	ret

00000168 <HAL_LCD_WRITE_COMMAND>:
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
 16c:	84 fb       	bst	r24, 4
 16e:	44 27       	eor	r20, r20
 170:	40 f9       	bld	r20, 0
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 17c:	c5 fb       	bst	r28, 5
 17e:	44 27       	eor	r20, r20
 180:	40 f9       	bld	r20, 0
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	83 e3       	ldi	r24, 0x33	; 51
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 18c:	c6 fb       	bst	r28, 6
 18e:	44 27       	eor	r20, r20
 190:	40 f9       	bld	r20, 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 19c:	4c 2f       	mov	r20, r28
 19e:	44 1f       	adc	r20, r20
 1a0:	44 27       	eor	r20, r20
 1a2:	44 1f       	adc	r20, r20
 1a4:	63 e0       	ldi	r22, 0x03	; 3
 1a6:	83 e3       	ldi	r24, 0x33	; 51
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	66 e0       	ldi	r22, 0x06	; 6
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	65 e0       	ldi	r22, 0x05	; 5
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1c6:	0e 94 a1 00 	call	0x142	; 0x142 <HAL_4BIT_LCD_KICK>
 1ca:	4c 2f       	mov	r20, r28
 1cc:	41 70       	andi	r20, 0x01	; 1
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	83 e3       	ldi	r24, 0x33	; 51
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1d8:	c1 fb       	bst	r28, 1
 1da:	44 27       	eor	r20, r20
 1dc:	40 f9       	bld	r20, 0
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	83 e3       	ldi	r24, 0x33	; 51
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1e8:	c2 fb       	bst	r28, 2
 1ea:	44 27       	eor	r20, r20
 1ec:	40 f9       	bld	r20, 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	83 e3       	ldi	r24, 0x33	; 51
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 1f8:	c3 fb       	bst	r28, 3
 1fa:	44 27       	eor	r20, r20
 1fc:	40 f9       	bld	r20, 0
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	83 e3       	ldi	r24, 0x33	; 51
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	66 e0       	ldi	r22, 0x06	; 6
 20c:	83 e3       	ldi	r24, 0x33	; 51
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	65 e0       	ldi	r22, 0x05	; 5
 218:	83 e3       	ldi	r24, 0x33	; 51
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
 220:	0e 94 a1 00 	call	0x142	; 0x142 <HAL_4BIT_LCD_KICK>
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <HAL_LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	87 e8       	ldi	r24, 0x87	; 135
 22a:	93 e1       	ldi	r25, 0x13	; 19
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <HAL_LCD_INIT+0x4>
 230:	00 c0       	rjmp	.+0      	; 0x232 <HAL_LCD_INIT+0xa>
 232:	00 00       	nop
	HAL_LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
	HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
	HAL_LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
#elif LCD_MODE == LCD_4_BIT_MODE
	_delay_ms(20);
	LCD_4BIT_INIT();
 234:	0e 94 4f 00 	call	0x9e	; 0x9e <LCD_4BIT_INIT>
 238:	85 ea       	ldi	r24, 0xA5	; 165
 23a:	9e e0       	ldi	r25, 0x0E	; 14
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <HAL_LCD_INIT+0x14>
 240:	00 c0       	rjmp	.+0      	; 0x242 <HAL_LCD_INIT+0x1a>
 242:	00 00       	nop
	_delay_ms(15);
	HAL_LCD_WRITE_COMMAND(0x02); // As data sheet
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 b4 00 	call	0x168	; 0x168 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	0e 94 b4 00 	call	0x168	; 0x168 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 b4 00 	call	0x168	; 0x168 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 256:	80 e8       	ldi	r24, 0x80	; 128
 258:	0e 94 b4 00 	call	0x168	; 0x168 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 25c:	8f e0       	ldi	r24, 0x0F	; 15
 25e:	0e 94 b4 00 	call	0x168	; 0x168 <HAL_LCD_WRITE_COMMAND>
 262:	08 95       	ret

00000264 <HAL_LCD_WRITE_CHAR>:
#endif

}

void HAL_LCD_WRITE_CHAR(uint8_t character)
{
 264:	cf 93       	push	r28
 266:	c8 2f       	mov	r28, r24
#elif LCD_MODE == LCD_4_BIT_MODE
	/* ====================== LCD is in 4 bit Mode ====================== */


	// Send last four bits of command
    MCAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (character >> 4) & 0x01);
 268:	84 fb       	bst	r24, 4
 26a:	44 27       	eor	r20, r20
 26c:	40 f9       	bld	r20, 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	83 e3       	ldi	r24, 0x33	; 51
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (character >> 5) & 0x01);
 278:	c5 fb       	bst	r28, 5
 27a:	44 27       	eor	r20, r20
 27c:	40 f9       	bld	r20, 0
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	83 e3       	ldi	r24, 0x33	; 51
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (character >> 6) & 0x01);
 288:	c6 fb       	bst	r28, 6
 28a:	44 27       	eor	r20, r20
 28c:	40 f9       	bld	r20, 0
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	83 e3       	ldi	r24, 0x33	; 51
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (character >> 7) & 0x01);
 298:	4c 2f       	mov	r20, r28
 29a:	44 1f       	adc	r20, r20
 29c:	44 27       	eor	r20, r20
 29e:	44 1f       	adc	r20, r20
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	83 e3       	ldi	r24, 0x33	; 51
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	66 e0       	ldi	r22, 0x06	; 6
 2ae:	83 e3       	ldi	r24, 0x33	; 51
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	65 e0       	ldi	r22, 0x05	; 5
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	HAL_4BIT_LCD_KICK();
 2c2:	0e 94 a1 00 	call	0x142	; 0x142 <HAL_4BIT_LCD_KICK>

	// Send first four bits of command
    MCAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (character >> 0) & 0x01);
 2c6:	4c 2f       	mov	r20, r28
 2c8:	41 70       	andi	r20, 0x01	; 1
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	83 e3       	ldi	r24, 0x33	; 51
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (character >> 1) & 0x01);
 2d4:	c1 fb       	bst	r28, 1
 2d6:	44 27       	eor	r20, r20
 2d8:	40 f9       	bld	r20, 0
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (character >> 2) & 0x01);
 2e4:	c2 fb       	bst	r28, 2
 2e6:	44 27       	eor	r20, r20
 2e8:	40 f9       	bld	r20, 0
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	83 e3       	ldi	r24, 0x33	; 51
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (character >> 3) & 0x01);
 2f4:	c3 fb       	bst	r28, 3
 2f6:	44 27       	eor	r20, r20
 2f8:	40 f9       	bld	r20, 0
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	83 e3       	ldi	r24, 0x33	; 51
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_RW_PORT, LCD_RW_PIN, GPIO_PIN_RESET);
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	66 e0       	ldi	r22, 0x06	; 6
 308:	83 e3       	ldi	r24, 0x33	; 51
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, GPIO_PIN_SET);
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	65 e0       	ldi	r22, 0x05	; 5
 314:	83 e3       	ldi	r24, 0x33	; 51
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <MCAL_GPIO_WritePin>
	HAL_4BIT_LCD_KICK();
 31c:	0e 94 a1 00 	call	0x142	; 0x142 <HAL_4BIT_LCD_KICK>
#endif

}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <main>:

#define F_CPU 8000000UL


int main(void)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	28 97       	sbiw	r28, 0x08	; 8
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
	USART_Config_t UartCfg;
	UartCfg.USART_Baudrate = USART_BAUD_RATE_9600;
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	8a 83       	std	Y+2, r24	; 0x02
	UartCfg.USART_Databits = USART_8_DATA_BITS;
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	8b 83       	std	Y+3, r24	; 0x03
	UartCfg.USART_IRQ_Enable = USART_IRQ_DISABLE;
 340:	1e 82       	std	Y+6, r1	; 0x06
	UartCfg.USART_Mode = USART_MODE_ASYNC;
 342:	19 82       	std	Y+1, r1	; 0x01
	UartCfg.USART_Paritybit = USART_NO_PARITY;
 344:	1c 82       	std	Y+4, r1	; 0x04
	UartCfg.USART_Stopbits = USART_1_STOP_BIT;
 346:	1d 82       	std	Y+5, r1	; 0x05
	UartCfg.P_IRQ_CallBack = NULL;
 348:	18 86       	std	Y+8, r1	; 0x08
 34a:	1f 82       	std	Y+7, r1	; 0x07
	MCAL_USART_Init(&UartCfg);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	0e 94 14 04 	call	0x828	; 0x828 <MCAL_USART_Init>
	HAL_LCD_INIT();
 354:	0e 94 14 01 	call	0x228	; 0x228 <HAL_LCD_INIT>
	MCAL_UART_SendData('A',USART_enable);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	81 e4       	ldi	r24, 0x41	; 65
 35c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MCAL_UART_SendData>
	MCAL_UART_SendData('H',USART_enable);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	88 e4       	ldi	r24, 0x48	; 72
 364:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MCAL_UART_SendData>
	MCAL_UART_SendData('M',USART_enable);
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	8d e4       	ldi	r24, 0x4D	; 77
 36c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MCAL_UART_SendData>
	MCAL_UART_SendData('E',USART_enable);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	85 e4       	ldi	r24, 0x45	; 69
 374:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MCAL_UART_SendData>
	MCAL_UART_SendData('D',USART_enable);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	84 e4       	ldi	r24, 0x44	; 68
 37c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MCAL_UART_SendData>
	
	while (1)
	{
		HAL_LCD_WRITE_CHAR(MCAL_UART_ReceiveData(USART_enable));
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 0c 05 	call	0xa18	; 0xa18 <MCAL_UART_ReceiveData>
 386:	0e 94 32 01 	call	0x264	; 0x264 <HAL_LCD_WRITE_CHAR>
 38a:	fa cf       	rjmp	.-12     	; 0x380 <main+0x5c>

0000038c <MCAL_GPIO_Init>:
uint8 MCAL_GPIO_ReadPort(GPIO_Typedef_t *GPIOx)
{
	uint8 PortState = 0x00;
	PortState = ((uint8)(GPIOx->PIN.PIN));
	return PortState;
}
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	dc 01       	movw	r26, r24
 392:	eb 01       	movw	r28, r22
 394:	e8 81       	ld	r30, Y
 396:	4e 2f       	mov	r20, r30
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	49 30       	cpi	r20, 0x09	; 9
 39c:	51 05       	cpc	r21, r1
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <MCAL_GPIO_Init+0x16>
 3a0:	a7 c1       	rjmp	.+846    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 3a2:	fa 01       	movw	r30, r20
 3a4:	e6 5d       	subi	r30, 0xD6	; 214
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__tablejump2__>
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	91 f0       	breq	.+36     	; 0x3d6 <MCAL_GPIO_Init+0x4a>
 3b2:	18 f0       	brcs	.+6      	; 0x3ba <MCAL_GPIO_Init+0x2e>
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	e9 f0       	breq	.+58     	; 0x3f2 <MCAL_GPIO_Init+0x66>
 3b8:	9b c1       	rjmp	.+822    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 3ba:	11 96       	adiw	r26, 0x01	; 1
 3bc:	8c 91       	ld	r24, X
 3be:	11 97       	sbiw	r26, 0x01	; 1
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	8c 93       	st	X, r24
 3c6:	11 97       	sbiw	r26, 0x01	; 1
 3c8:	12 96       	adiw	r26, 0x02	; 2
 3ca:	8c 91       	ld	r24, X
 3cc:	12 97       	sbiw	r26, 0x02	; 2
 3ce:	8e 7f       	andi	r24, 0xFE	; 254
 3d0:	12 96       	adiw	r26, 0x02	; 2
 3d2:	8c 93       	st	X, r24
 3d4:	8d c1       	rjmp	.+794    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 3d6:	11 96       	adiw	r26, 0x01	; 1
 3d8:	8c 91       	ld	r24, X
 3da:	11 97       	sbiw	r26, 0x01	; 1
 3dc:	8e 7f       	andi	r24, 0xFE	; 254
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	8c 93       	st	X, r24
 3e2:	11 97       	sbiw	r26, 0x01	; 1
 3e4:	12 96       	adiw	r26, 0x02	; 2
 3e6:	8c 91       	ld	r24, X
 3e8:	12 97       	sbiw	r26, 0x02	; 2
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	8c 93       	st	X, r24
 3f0:	7f c1       	rjmp	.+766    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 3f2:	11 96       	adiw	r26, 0x01	; 1
 3f4:	8c 91       	ld	r24, X
 3f6:	11 97       	sbiw	r26, 0x01	; 1
 3f8:	81 60       	ori	r24, 0x01	; 1
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	8c 93       	st	X, r24
 3fe:	11 97       	sbiw	r26, 0x01	; 1
 400:	12 96       	adiw	r26, 0x02	; 2
 402:	8c 91       	ld	r24, X
 404:	12 97       	sbiw	r26, 0x02	; 2
 406:	8e 7f       	andi	r24, 0xFE	; 254
 408:	12 96       	adiw	r26, 0x02	; 2
 40a:	8c 93       	st	X, r24
 40c:	71 c1       	rjmp	.+738    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	91 f0       	breq	.+36     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 414:	18 f0       	brcs	.+6      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 416:	82 30       	cpi	r24, 0x02	; 2
 418:	e9 f0       	breq	.+58     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 41a:	6a c1       	rjmp	.+724    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 41c:	11 96       	adiw	r26, 0x01	; 1
 41e:	8c 91       	ld	r24, X
 420:	11 97       	sbiw	r26, 0x01	; 1
 422:	8d 7f       	andi	r24, 0xFD	; 253
 424:	11 96       	adiw	r26, 0x01	; 1
 426:	8c 93       	st	X, r24
 428:	11 97       	sbiw	r26, 0x01	; 1
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	8c 91       	ld	r24, X
 42e:	12 97       	sbiw	r26, 0x02	; 2
 430:	8d 7f       	andi	r24, 0xFD	; 253
 432:	12 96       	adiw	r26, 0x02	; 2
 434:	8c 93       	st	X, r24
 436:	5c c1       	rjmp	.+696    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 438:	11 96       	adiw	r26, 0x01	; 1
 43a:	8c 91       	ld	r24, X
 43c:	11 97       	sbiw	r26, 0x01	; 1
 43e:	8d 7f       	andi	r24, 0xFD	; 253
 440:	11 96       	adiw	r26, 0x01	; 1
 442:	8c 93       	st	X, r24
 444:	11 97       	sbiw	r26, 0x01	; 1
 446:	12 96       	adiw	r26, 0x02	; 2
 448:	8c 91       	ld	r24, X
 44a:	12 97       	sbiw	r26, 0x02	; 2
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	8c 93       	st	X, r24
 452:	4e c1       	rjmp	.+668    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 454:	11 96       	adiw	r26, 0x01	; 1
 456:	8c 91       	ld	r24, X
 458:	11 97       	sbiw	r26, 0x01	; 1
 45a:	82 60       	ori	r24, 0x02	; 2
 45c:	11 96       	adiw	r26, 0x01	; 1
 45e:	8c 93       	st	X, r24
 460:	11 97       	sbiw	r26, 0x01	; 1
 462:	12 96       	adiw	r26, 0x02	; 2
 464:	8c 91       	ld	r24, X
 466:	12 97       	sbiw	r26, 0x02	; 2
 468:	8d 7f       	andi	r24, 0xFD	; 253
 46a:	12 96       	adiw	r26, 0x02	; 2
 46c:	8c 93       	st	X, r24
 46e:	40 c1       	rjmp	.+640    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 f0       	breq	.+36     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 476:	18 f0       	brcs	.+6      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	e9 f0       	breq	.+58     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 47c:	39 c1       	rjmp	.+626    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 47e:	11 96       	adiw	r26, 0x01	; 1
 480:	8c 91       	ld	r24, X
 482:	11 97       	sbiw	r26, 0x01	; 1
 484:	8b 7f       	andi	r24, 0xFB	; 251
 486:	11 96       	adiw	r26, 0x01	; 1
 488:	8c 93       	st	X, r24
 48a:	11 97       	sbiw	r26, 0x01	; 1
 48c:	12 96       	adiw	r26, 0x02	; 2
 48e:	8c 91       	ld	r24, X
 490:	12 97       	sbiw	r26, 0x02	; 2
 492:	8b 7f       	andi	r24, 0xFB	; 251
 494:	12 96       	adiw	r26, 0x02	; 2
 496:	8c 93       	st	X, r24
 498:	2b c1       	rjmp	.+598    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 49a:	11 96       	adiw	r26, 0x01	; 1
 49c:	8c 91       	ld	r24, X
 49e:	11 97       	sbiw	r26, 0x01	; 1
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	11 96       	adiw	r26, 0x01	; 1
 4a4:	8c 93       	st	X, r24
 4a6:	11 97       	sbiw	r26, 0x01	; 1
 4a8:	12 96       	adiw	r26, 0x02	; 2
 4aa:	8c 91       	ld	r24, X
 4ac:	12 97       	sbiw	r26, 0x02	; 2
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	12 96       	adiw	r26, 0x02	; 2
 4b2:	8c 93       	st	X, r24
 4b4:	1d c1       	rjmp	.+570    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 4b6:	11 96       	adiw	r26, 0x01	; 1
 4b8:	8c 91       	ld	r24, X
 4ba:	11 97       	sbiw	r26, 0x01	; 1
 4bc:	84 60       	ori	r24, 0x04	; 4
 4be:	11 96       	adiw	r26, 0x01	; 1
 4c0:	8c 93       	st	X, r24
 4c2:	11 97       	sbiw	r26, 0x01	; 1
 4c4:	12 96       	adiw	r26, 0x02	; 2
 4c6:	8c 91       	ld	r24, X
 4c8:	12 97       	sbiw	r26, 0x02	; 2
 4ca:	8b 7f       	andi	r24, 0xFB	; 251
 4cc:	12 96       	adiw	r26, 0x02	; 2
 4ce:	8c 93       	st	X, r24
 4d0:	0f c1       	rjmp	.+542    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 4d2:	89 81       	ldd	r24, Y+1	; 0x01
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	91 f0       	breq	.+36     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4d8:	18 f0       	brcs	.+6      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	e9 f0       	breq	.+58     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 4de:	08 c1       	rjmp	.+528    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 4e0:	11 96       	adiw	r26, 0x01	; 1
 4e2:	8c 91       	ld	r24, X
 4e4:	11 97       	sbiw	r26, 0x01	; 1
 4e6:	87 7f       	andi	r24, 0xF7	; 247
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	8c 93       	st	X, r24
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	12 96       	adiw	r26, 0x02	; 2
 4f0:	8c 91       	ld	r24, X
 4f2:	12 97       	sbiw	r26, 0x02	; 2
 4f4:	87 7f       	andi	r24, 0xF7	; 247
 4f6:	12 96       	adiw	r26, 0x02	; 2
 4f8:	8c 93       	st	X, r24
 4fa:	fa c0       	rjmp	.+500    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 4fc:	11 96       	adiw	r26, 0x01	; 1
 4fe:	8c 91       	ld	r24, X
 500:	11 97       	sbiw	r26, 0x01	; 1
 502:	87 7f       	andi	r24, 0xF7	; 247
 504:	11 96       	adiw	r26, 0x01	; 1
 506:	8c 93       	st	X, r24
 508:	11 97       	sbiw	r26, 0x01	; 1
 50a:	12 96       	adiw	r26, 0x02	; 2
 50c:	8c 91       	ld	r24, X
 50e:	12 97       	sbiw	r26, 0x02	; 2
 510:	88 60       	ori	r24, 0x08	; 8
 512:	12 96       	adiw	r26, 0x02	; 2
 514:	8c 93       	st	X, r24
 516:	ec c0       	rjmp	.+472    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 518:	11 96       	adiw	r26, 0x01	; 1
 51a:	8c 91       	ld	r24, X
 51c:	11 97       	sbiw	r26, 0x01	; 1
 51e:	88 60       	ori	r24, 0x08	; 8
 520:	11 96       	adiw	r26, 0x01	; 1
 522:	8c 93       	st	X, r24
 524:	11 97       	sbiw	r26, 0x01	; 1
 526:	12 96       	adiw	r26, 0x02	; 2
 528:	8c 91       	ld	r24, X
 52a:	12 97       	sbiw	r26, 0x02	; 2
 52c:	87 7f       	andi	r24, 0xF7	; 247
 52e:	12 96       	adiw	r26, 0x02	; 2
 530:	8c 93       	st	X, r24
 532:	de c0       	rjmp	.+444    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	91 f0       	breq	.+36     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 53a:	18 f0       	brcs	.+6      	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	e9 f0       	breq	.+58     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
 540:	d7 c0       	rjmp	.+430    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 542:	11 96       	adiw	r26, 0x01	; 1
 544:	8c 91       	ld	r24, X
 546:	11 97       	sbiw	r26, 0x01	; 1
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	11 96       	adiw	r26, 0x01	; 1
 54c:	8c 93       	st	X, r24
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	12 96       	adiw	r26, 0x02	; 2
 552:	8c 91       	ld	r24, X
 554:	12 97       	sbiw	r26, 0x02	; 2
 556:	8f 7e       	andi	r24, 0xEF	; 239
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	8c 93       	st	X, r24
 55c:	c9 c0       	rjmp	.+402    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 55e:	11 96       	adiw	r26, 0x01	; 1
 560:	8c 91       	ld	r24, X
 562:	11 97       	sbiw	r26, 0x01	; 1
 564:	8f 7e       	andi	r24, 0xEF	; 239
 566:	11 96       	adiw	r26, 0x01	; 1
 568:	8c 93       	st	X, r24
 56a:	11 97       	sbiw	r26, 0x01	; 1
 56c:	12 96       	adiw	r26, 0x02	; 2
 56e:	8c 91       	ld	r24, X
 570:	12 97       	sbiw	r26, 0x02	; 2
 572:	80 61       	ori	r24, 0x10	; 16
 574:	12 96       	adiw	r26, 0x02	; 2
 576:	8c 93       	st	X, r24
 578:	bb c0       	rjmp	.+374    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 57a:	11 96       	adiw	r26, 0x01	; 1
 57c:	8c 91       	ld	r24, X
 57e:	11 97       	sbiw	r26, 0x01	; 1
 580:	80 61       	ori	r24, 0x10	; 16
 582:	11 96       	adiw	r26, 0x01	; 1
 584:	8c 93       	st	X, r24
 586:	11 97       	sbiw	r26, 0x01	; 1
 588:	12 96       	adiw	r26, 0x02	; 2
 58a:	8c 91       	ld	r24, X
 58c:	12 97       	sbiw	r26, 0x02	; 2
 58e:	8f 7e       	andi	r24, 0xEF	; 239
 590:	12 96       	adiw	r26, 0x02	; 2
 592:	8c 93       	st	X, r24
 594:	ad c0       	rjmp	.+346    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	91 f0       	breq	.+36     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 59c:	18 f0       	brcs	.+6      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	e9 f0       	breq	.+58     	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
 5a2:	a6 c0       	rjmp	.+332    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 5a4:	11 96       	adiw	r26, 0x01	; 1
 5a6:	8c 91       	ld	r24, X
 5a8:	11 97       	sbiw	r26, 0x01	; 1
 5aa:	8f 7d       	andi	r24, 0xDF	; 223
 5ac:	11 96       	adiw	r26, 0x01	; 1
 5ae:	8c 93       	st	X, r24
 5b0:	11 97       	sbiw	r26, 0x01	; 1
 5b2:	12 96       	adiw	r26, 0x02	; 2
 5b4:	8c 91       	ld	r24, X
 5b6:	12 97       	sbiw	r26, 0x02	; 2
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	12 96       	adiw	r26, 0x02	; 2
 5bc:	8c 93       	st	X, r24
 5be:	98 c0       	rjmp	.+304    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 5c0:	11 96       	adiw	r26, 0x01	; 1
 5c2:	8c 91       	ld	r24, X
 5c4:	11 97       	sbiw	r26, 0x01	; 1
 5c6:	8f 7d       	andi	r24, 0xDF	; 223
 5c8:	11 96       	adiw	r26, 0x01	; 1
 5ca:	8c 93       	st	X, r24
 5cc:	11 97       	sbiw	r26, 0x01	; 1
 5ce:	12 96       	adiw	r26, 0x02	; 2
 5d0:	8c 91       	ld	r24, X
 5d2:	12 97       	sbiw	r26, 0x02	; 2
 5d4:	80 62       	ori	r24, 0x20	; 32
 5d6:	12 96       	adiw	r26, 0x02	; 2
 5d8:	8c 93       	st	X, r24
 5da:	8a c0       	rjmp	.+276    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 5dc:	11 96       	adiw	r26, 0x01	; 1
 5de:	8c 91       	ld	r24, X
 5e0:	11 97       	sbiw	r26, 0x01	; 1
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	11 96       	adiw	r26, 0x01	; 1
 5e6:	8c 93       	st	X, r24
 5e8:	11 97       	sbiw	r26, 0x01	; 1
 5ea:	12 96       	adiw	r26, 0x02	; 2
 5ec:	8c 91       	ld	r24, X
 5ee:	12 97       	sbiw	r26, 0x02	; 2
 5f0:	8f 7d       	andi	r24, 0xDF	; 223
 5f2:	12 96       	adiw	r26, 0x02	; 2
 5f4:	8c 93       	st	X, r24
 5f6:	7c c0       	rjmp	.+248    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	91 f0       	breq	.+36     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 5fe:	18 f0       	brcs	.+6      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	e9 f0       	breq	.+58     	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
 604:	75 c0       	rjmp	.+234    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 606:	11 96       	adiw	r26, 0x01	; 1
 608:	8c 91       	ld	r24, X
 60a:	11 97       	sbiw	r26, 0x01	; 1
 60c:	8f 7b       	andi	r24, 0xBF	; 191
 60e:	11 96       	adiw	r26, 0x01	; 1
 610:	8c 93       	st	X, r24
 612:	11 97       	sbiw	r26, 0x01	; 1
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	8c 91       	ld	r24, X
 618:	12 97       	sbiw	r26, 0x02	; 2
 61a:	8f 7b       	andi	r24, 0xBF	; 191
 61c:	12 96       	adiw	r26, 0x02	; 2
 61e:	8c 93       	st	X, r24
 620:	67 c0       	rjmp	.+206    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 622:	11 96       	adiw	r26, 0x01	; 1
 624:	8c 91       	ld	r24, X
 626:	11 97       	sbiw	r26, 0x01	; 1
 628:	8f 7b       	andi	r24, 0xBF	; 191
 62a:	11 96       	adiw	r26, 0x01	; 1
 62c:	8c 93       	st	X, r24
 62e:	11 97       	sbiw	r26, 0x01	; 1
 630:	12 96       	adiw	r26, 0x02	; 2
 632:	8c 91       	ld	r24, X
 634:	12 97       	sbiw	r26, 0x02	; 2
 636:	80 64       	ori	r24, 0x40	; 64
 638:	12 96       	adiw	r26, 0x02	; 2
 63a:	8c 93       	st	X, r24
 63c:	59 c0       	rjmp	.+178    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 63e:	11 96       	adiw	r26, 0x01	; 1
 640:	8c 91       	ld	r24, X
 642:	11 97       	sbiw	r26, 0x01	; 1
 644:	80 64       	ori	r24, 0x40	; 64
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	8c 93       	st	X, r24
 64a:	11 97       	sbiw	r26, 0x01	; 1
 64c:	12 96       	adiw	r26, 0x02	; 2
 64e:	8c 91       	ld	r24, X
 650:	12 97       	sbiw	r26, 0x02	; 2
 652:	8f 7b       	andi	r24, 0xBF	; 191
 654:	12 96       	adiw	r26, 0x02	; 2
 656:	8c 93       	st	X, r24
 658:	4b c0       	rjmp	.+150    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	91 f0       	breq	.+36     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
 660:	18 f0       	brcs	.+6      	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
 662:	82 30       	cpi	r24, 0x02	; 2
 664:	e9 f0       	breq	.+58     	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
 666:	44 c0       	rjmp	.+136    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 668:	11 96       	adiw	r26, 0x01	; 1
 66a:	8c 91       	ld	r24, X
 66c:	11 97       	sbiw	r26, 0x01	; 1
 66e:	8f 77       	andi	r24, 0x7F	; 127
 670:	11 96       	adiw	r26, 0x01	; 1
 672:	8c 93       	st	X, r24
 674:	11 97       	sbiw	r26, 0x01	; 1
 676:	12 96       	adiw	r26, 0x02	; 2
 678:	8c 91       	ld	r24, X
 67a:	12 97       	sbiw	r26, 0x02	; 2
 67c:	8f 77       	andi	r24, 0x7F	; 127
 67e:	12 96       	adiw	r26, 0x02	; 2
 680:	8c 93       	st	X, r24
 682:	36 c0       	rjmp	.+108    	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 684:	11 96       	adiw	r26, 0x01	; 1
 686:	8c 91       	ld	r24, X
 688:	11 97       	sbiw	r26, 0x01	; 1
 68a:	8f 77       	andi	r24, 0x7F	; 127
 68c:	11 96       	adiw	r26, 0x01	; 1
 68e:	8c 93       	st	X, r24
 690:	11 97       	sbiw	r26, 0x01	; 1
 692:	12 96       	adiw	r26, 0x02	; 2
 694:	8c 91       	ld	r24, X
 696:	12 97       	sbiw	r26, 0x02	; 2
 698:	80 68       	ori	r24, 0x80	; 128
 69a:	12 96       	adiw	r26, 0x02	; 2
 69c:	8c 93       	st	X, r24
 69e:	28 c0       	rjmp	.+80     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6a0:	11 96       	adiw	r26, 0x01	; 1
 6a2:	8c 91       	ld	r24, X
 6a4:	11 97       	sbiw	r26, 0x01	; 1
 6a6:	80 68       	ori	r24, 0x80	; 128
 6a8:	11 96       	adiw	r26, 0x01	; 1
 6aa:	8c 93       	st	X, r24
 6ac:	11 97       	sbiw	r26, 0x01	; 1
 6ae:	12 96       	adiw	r26, 0x02	; 2
 6b0:	8c 91       	ld	r24, X
 6b2:	12 97       	sbiw	r26, 0x02	; 2
 6b4:	8f 77       	andi	r24, 0x7F	; 127
 6b6:	12 96       	adiw	r26, 0x02	; 2
 6b8:	8c 93       	st	X, r24
 6ba:	1a c0       	rjmp	.+52     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6bc:	89 81       	ldd	r24, Y+1	; 0x01
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	51 f0       	breq	.+20     	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
 6c2:	18 f0       	brcs	.+6      	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
 6c4:	82 30       	cpi	r24, 0x02	; 2
 6c6:	71 f0       	breq	.+28     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 6c8:	13 c0       	rjmp	.+38     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6ca:	11 96       	adiw	r26, 0x01	; 1
 6cc:	1c 92       	st	X, r1
 6ce:	11 97       	sbiw	r26, 0x01	; 1
 6d0:	12 96       	adiw	r26, 0x02	; 2
 6d2:	1c 92       	st	X, r1
 6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6d6:	11 96       	adiw	r26, 0x01	; 1
 6d8:	1c 92       	st	X, r1
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	12 96       	adiw	r26, 0x02	; 2
 6e0:	8c 93       	st	X, r24
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
 6e4:	8f ef       	ldi	r24, 0xFF	; 255
 6e6:	11 96       	adiw	r26, 0x01	; 1
 6e8:	8c 93       	st	X, r24
 6ea:	11 97       	sbiw	r26, 0x01	; 1
 6ec:	12 96       	adiw	r26, 0x02	; 2
 6ee:	1c 92       	st	X, r1
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	08 95       	ret

000006f6 <MCAL_GPIO_WritePin>:
 * @param [in]  -Value: Specifies one of @ref GPIO_PIN_STATE to be written.
 * @retval 		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_Typedef_t *GPIOx,uint8 PinNumber,uint8 Value)
{
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
	switch(PinNumber)
 6fa:	06 2f       	mov	r16, r22
 6fc:	10 e0       	ldi	r17, 0x00	; 0
 6fe:	08 30       	cpi	r16, 0x08	; 8
 700:	11 05       	cpc	r17, r1
 702:	08 f0       	brcs	.+2      	; 0x706 <MCAL_GPIO_WritePin+0x10>
 704:	64 c0       	rjmp	.+200    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
 706:	f8 01       	movw	r30, r16
 708:	ed 5c       	subi	r30, 0xCD	; 205
 70a:	ff 4f       	sbci	r31, 0xFF	; 255
 70c:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__tablejump2__>
	{
		case GPIO_PIN_0:
		{
			if(Value)
 710:	44 23       	and	r20, r20
 712:	29 f0       	breq	.+10     	; 0x71e <MCAL_GPIO_WritePin+0x28>
				GPIOx->PORT.bits.PORT0 = GPIO_PIN_HIGH;
 714:	fc 01       	movw	r30, r24
 716:	22 81       	ldd	r18, Z+2	; 0x02
 718:	21 60       	ori	r18, 0x01	; 1
 71a:	22 83       	std	Z+2, r18	; 0x02
 71c:	58 c0       	rjmp	.+176    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT0 = GPIO_PIN_LOW;
 71e:	fc 01       	movw	r30, r24
 720:	22 81       	ldd	r18, Z+2	; 0x02
 722:	2e 7f       	andi	r18, 0xFE	; 254
 724:	22 83       	std	Z+2, r18	; 0x02
 726:	53 c0       	rjmp	.+166    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_1:
		{
			if(Value)
 728:	44 23       	and	r20, r20
 72a:	29 f0       	breq	.+10     	; 0x736 <MCAL_GPIO_WritePin+0x40>
				GPIOx->PORT.bits.PORT1 = GPIO_PIN_HIGH;
 72c:	fc 01       	movw	r30, r24
 72e:	22 81       	ldd	r18, Z+2	; 0x02
 730:	22 60       	ori	r18, 0x02	; 2
 732:	22 83       	std	Z+2, r18	; 0x02
 734:	4c c0       	rjmp	.+152    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT1 = GPIO_PIN_LOW;
 736:	fc 01       	movw	r30, r24
 738:	22 81       	ldd	r18, Z+2	; 0x02
 73a:	2d 7f       	andi	r18, 0xFD	; 253
 73c:	22 83       	std	Z+2, r18	; 0x02
 73e:	47 c0       	rjmp	.+142    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_2:
		{
			if(Value)
 740:	44 23       	and	r20, r20
 742:	29 f0       	breq	.+10     	; 0x74e <MCAL_GPIO_WritePin+0x58>
				GPIOx->PORT.bits.PORT2 = GPIO_PIN_HIGH;
 744:	fc 01       	movw	r30, r24
 746:	22 81       	ldd	r18, Z+2	; 0x02
 748:	24 60       	ori	r18, 0x04	; 4
 74a:	22 83       	std	Z+2, r18	; 0x02
 74c:	40 c0       	rjmp	.+128    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT2 = GPIO_PIN_LOW;
 74e:	fc 01       	movw	r30, r24
 750:	22 81       	ldd	r18, Z+2	; 0x02
 752:	2b 7f       	andi	r18, 0xFB	; 251
 754:	22 83       	std	Z+2, r18	; 0x02
 756:	3b c0       	rjmp	.+118    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_3:
		{
			if(Value)
 758:	44 23       	and	r20, r20
 75a:	29 f0       	breq	.+10     	; 0x766 <MCAL_GPIO_WritePin+0x70>
				GPIOx->PORT.bits.PORT3 = GPIO_PIN_HIGH;
 75c:	fc 01       	movw	r30, r24
 75e:	22 81       	ldd	r18, Z+2	; 0x02
 760:	28 60       	ori	r18, 0x08	; 8
 762:	22 83       	std	Z+2, r18	; 0x02
 764:	34 c0       	rjmp	.+104    	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT3 = GPIO_PIN_LOW;
 766:	fc 01       	movw	r30, r24
 768:	22 81       	ldd	r18, Z+2	; 0x02
 76a:	27 7f       	andi	r18, 0xF7	; 247
 76c:	22 83       	std	Z+2, r18	; 0x02
 76e:	2f c0       	rjmp	.+94     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_4:
		{
			if(Value)
 770:	44 23       	and	r20, r20
 772:	29 f0       	breq	.+10     	; 0x77e <MCAL_GPIO_WritePin+0x88>
				GPIOx->PORT.bits.PORT4 = GPIO_PIN_HIGH;
 774:	fc 01       	movw	r30, r24
 776:	22 81       	ldd	r18, Z+2	; 0x02
 778:	20 61       	ori	r18, 0x10	; 16
 77a:	22 83       	std	Z+2, r18	; 0x02
 77c:	28 c0       	rjmp	.+80     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT4 = GPIO_PIN_LOW;
 77e:	fc 01       	movw	r30, r24
 780:	22 81       	ldd	r18, Z+2	; 0x02
 782:	2f 7e       	andi	r18, 0xEF	; 239
 784:	22 83       	std	Z+2, r18	; 0x02
 786:	23 c0       	rjmp	.+70     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_5:
		{
			if(Value)
 788:	44 23       	and	r20, r20
 78a:	29 f0       	breq	.+10     	; 0x796 <MCAL_GPIO_WritePin+0xa0>
				GPIOx->PORT.bits.PORT5 = GPIO_PIN_HIGH;
 78c:	fc 01       	movw	r30, r24
 78e:	22 81       	ldd	r18, Z+2	; 0x02
 790:	20 62       	ori	r18, 0x20	; 32
 792:	22 83       	std	Z+2, r18	; 0x02
 794:	1c c0       	rjmp	.+56     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT5 = GPIO_PIN_LOW;
 796:	fc 01       	movw	r30, r24
 798:	22 81       	ldd	r18, Z+2	; 0x02
 79a:	2f 7d       	andi	r18, 0xDF	; 223
 79c:	22 83       	std	Z+2, r18	; 0x02
 79e:	17 c0       	rjmp	.+46     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_6:
		{
			if(Value)
 7a0:	44 23       	and	r20, r20
 7a2:	29 f0       	breq	.+10     	; 0x7ae <MCAL_GPIO_WritePin+0xb8>
				GPIOx->PORT.bits.PORT6 = GPIO_PIN_HIGH;
 7a4:	fc 01       	movw	r30, r24
 7a6:	22 81       	ldd	r18, Z+2	; 0x02
 7a8:	20 64       	ori	r18, 0x40	; 64
 7aa:	22 83       	std	Z+2, r18	; 0x02
 7ac:	10 c0       	rjmp	.+32     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT6 = GPIO_PIN_LOW;
 7ae:	fc 01       	movw	r30, r24
 7b0:	22 81       	ldd	r18, Z+2	; 0x02
 7b2:	2f 7b       	andi	r18, 0xBF	; 191
 7b4:	22 83       	std	Z+2, r18	; 0x02
 7b6:	0b c0       	rjmp	.+22     	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			break;
		}
		case GPIO_PIN_7:
		{
			if(Value)
 7b8:	44 23       	and	r20, r20
 7ba:	29 f0       	breq	.+10     	; 0x7c6 <MCAL_GPIO_WritePin+0xd0>
				GPIOx->PORT.bits.PORT7 = GPIO_PIN_HIGH;
 7bc:	fc 01       	movw	r30, r24
 7be:	22 81       	ldd	r18, Z+2	; 0x02
 7c0:	20 68       	ori	r18, 0x80	; 128
 7c2:	22 83       	std	Z+2, r18	; 0x02
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <MCAL_GPIO_WritePin+0xd8>
			else
				GPIOx->PORT.bits.PORT7 = GPIO_PIN_LOW;
 7c6:	fc 01       	movw	r30, r24
 7c8:	22 81       	ldd	r18, Z+2	; 0x02
 7ca:	2f 77       	andi	r18, 0x7F	; 127
 7cc:	22 83       	std	Z+2, r18	; 0x02
			break;
		}
	}
}
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	08 95       	ret

000007d4 <__vector_12>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

ISR(SPI_STC_vect)
{
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	2f 93       	push	r18
 7e0:	3f 93       	push	r19
 7e2:	4f 93       	push	r20
 7e4:	5f 93       	push	r21
 7e6:	6f 93       	push	r22
 7e8:	7f 93       	push	r23
 7ea:	8f 93       	push	r24
 7ec:	9f 93       	push	r25
 7ee:	af 93       	push	r26
 7f0:	bf 93       	push	r27
 7f2:	ef 93       	push	r30
 7f4:	ff 93       	push	r31
	G_SPI_Config->P_IRQ_CallBack();
 7f6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7fa:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7fe:	00 84       	ldd	r0, Z+8	; 0x08
 800:	f1 85       	ldd	r31, Z+9	; 0x09
 802:	e0 2d       	mov	r30, r0
 804:	09 95       	icall
 806:	ff 91       	pop	r31
 808:	ef 91       	pop	r30
 80a:	bf 91       	pop	r27
 80c:	af 91       	pop	r26
 80e:	9f 91       	pop	r25
 810:	8f 91       	pop	r24
 812:	7f 91       	pop	r23
 814:	6f 91       	pop	r22
 816:	5f 91       	pop	r21
 818:	4f 91       	pop	r20
 81a:	3f 91       	pop	r19
 81c:	2f 91       	pop	r18
 81e:	0f 90       	pop	r0
 820:	0f be       	out	0x3f, r0	; 63
 822:	0f 90       	pop	r0
 824:	1f 90       	pop	r1
 826:	18 95       	reti

00000828 <MCAL_USART_Init>:
 */
void MCAL_USART_ReceiveString(uint8 *pRxBuffer)
{
	while(1)
	{
		while(!(USART->UCSRA_.bits.RXC_));
 828:	fc 01       	movw	r30, r24
 82a:	81 81       	ldd	r24, Z+1	; 0x01
 82c:	89 b9       	out	0x09, r24	; 9
 82e:	8b b1       	in	r24, 0x0b	; 11
 830:	8d 7f       	andi	r24, 0xFD	; 253
 832:	8b b9       	out	0x0b, r24	; 11
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	82 30       	cpi	r24, 0x02	; 2
 838:	29 f1       	breq	.+74     	; 0x884 <__stack+0x25>
 83a:	28 f4       	brcc	.+10     	; 0x846 <MCAL_USART_Init+0x1e>
 83c:	88 23       	and	r24, r24
 83e:	41 f0       	breq	.+16     	; 0x850 <MCAL_USART_Init+0x28>
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	99 f0       	breq	.+38     	; 0x86a <__stack+0xb>
 844:	45 c0       	rjmp	.+138    	; 0x8d0 <__stack+0x71>
 846:	83 30       	cpi	r24, 0x03	; 3
 848:	51 f1       	breq	.+84     	; 0x89e <__stack+0x3f>
 84a:	84 30       	cpi	r24, 0x04	; 4
 84c:	a9 f1       	breq	.+106    	; 0x8b8 <__stack+0x59>
 84e:	40 c0       	rjmp	.+128    	; 0x8d0 <__stack+0x71>
 850:	80 b5       	in	r24, 0x20	; 32
 852:	80 68       	ori	r24, 0x80	; 128
 854:	80 bd       	out	0x20, r24	; 32
 856:	80 b5       	in	r24, 0x20	; 32
 858:	8d 7f       	andi	r24, 0xFD	; 253
 85a:	80 bd       	out	0x20, r24	; 32
 85c:	80 b5       	in	r24, 0x20	; 32
 85e:	8b 7f       	andi	r24, 0xFB	; 251
 860:	80 bd       	out	0x20, r24	; 32
 862:	8a b1       	in	r24, 0x0a	; 10
 864:	8b 7f       	andi	r24, 0xFB	; 251
 866:	8a b9       	out	0x0a, r24	; 10
 868:	33 c0       	rjmp	.+102    	; 0x8d0 <__stack+0x71>
 86a:	80 b5       	in	r24, 0x20	; 32
 86c:	80 68       	ori	r24, 0x80	; 128
 86e:	80 bd       	out	0x20, r24	; 32
 870:	80 b5       	in	r24, 0x20	; 32
 872:	82 60       	ori	r24, 0x02	; 2
 874:	80 bd       	out	0x20, r24	; 32
 876:	80 b5       	in	r24, 0x20	; 32
 878:	8b 7f       	andi	r24, 0xFB	; 251
 87a:	80 bd       	out	0x20, r24	; 32
 87c:	8a b1       	in	r24, 0x0a	; 10
 87e:	8b 7f       	andi	r24, 0xFB	; 251
 880:	8a b9       	out	0x0a, r24	; 10
 882:	26 c0       	rjmp	.+76     	; 0x8d0 <__stack+0x71>
 884:	80 b5       	in	r24, 0x20	; 32
 886:	80 68       	ori	r24, 0x80	; 128
 888:	80 bd       	out	0x20, r24	; 32
 88a:	80 b5       	in	r24, 0x20	; 32
 88c:	8d 7f       	andi	r24, 0xFD	; 253
 88e:	80 bd       	out	0x20, r24	; 32
 890:	80 b5       	in	r24, 0x20	; 32
 892:	84 60       	ori	r24, 0x04	; 4
 894:	80 bd       	out	0x20, r24	; 32
 896:	8a b1       	in	r24, 0x0a	; 10
 898:	8b 7f       	andi	r24, 0xFB	; 251
 89a:	8a b9       	out	0x0a, r24	; 10
 89c:	19 c0       	rjmp	.+50     	; 0x8d0 <__stack+0x71>
 89e:	80 b5       	in	r24, 0x20	; 32
 8a0:	80 68       	ori	r24, 0x80	; 128
 8a2:	80 bd       	out	0x20, r24	; 32
 8a4:	80 b5       	in	r24, 0x20	; 32
 8a6:	82 60       	ori	r24, 0x02	; 2
 8a8:	80 bd       	out	0x20, r24	; 32
 8aa:	80 b5       	in	r24, 0x20	; 32
 8ac:	84 60       	ori	r24, 0x04	; 4
 8ae:	80 bd       	out	0x20, r24	; 32
 8b0:	8a b1       	in	r24, 0x0a	; 10
 8b2:	8b 7f       	andi	r24, 0xFB	; 251
 8b4:	8a b9       	out	0x0a, r24	; 10
 8b6:	0c c0       	rjmp	.+24     	; 0x8d0 <__stack+0x71>
 8b8:	80 b5       	in	r24, 0x20	; 32
 8ba:	80 68       	ori	r24, 0x80	; 128
 8bc:	80 bd       	out	0x20, r24	; 32
 8be:	80 b5       	in	r24, 0x20	; 32
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	80 bd       	out	0x20, r24	; 32
 8c4:	80 b5       	in	r24, 0x20	; 32
 8c6:	84 60       	ori	r24, 0x04	; 4
 8c8:	80 bd       	out	0x20, r24	; 32
 8ca:	8a b1       	in	r24, 0x0a	; 10
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	8a b9       	out	0x0a, r24	; 10
 8d0:	83 81       	ldd	r24, Z+3	; 0x03
 8d2:	81 30       	cpi	r24, 0x01	; 1
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__stack+0x93>
 8d6:	18 f0       	brcs	.+6      	; 0x8de <__stack+0x7f>
 8d8:	82 30       	cpi	r24, 0x02	; 2
 8da:	a9 f0       	breq	.+42     	; 0x906 <__stack+0xa7>
 8dc:	1d c0       	rjmp	.+58     	; 0x918 <__stack+0xb9>
 8de:	80 b5       	in	r24, 0x20	; 32
 8e0:	80 68       	ori	r24, 0x80	; 128
 8e2:	80 bd       	out	0x20, r24	; 32
 8e4:	80 b5       	in	r24, 0x20	; 32
 8e6:	8f 7e       	andi	r24, 0xEF	; 239
 8e8:	80 bd       	out	0x20, r24	; 32
 8ea:	80 b5       	in	r24, 0x20	; 32
 8ec:	8f 7d       	andi	r24, 0xDF	; 223
 8ee:	80 bd       	out	0x20, r24	; 32
 8f0:	13 c0       	rjmp	.+38     	; 0x918 <__stack+0xb9>
 8f2:	80 b5       	in	r24, 0x20	; 32
 8f4:	80 68       	ori	r24, 0x80	; 128
 8f6:	80 bd       	out	0x20, r24	; 32
 8f8:	80 b5       	in	r24, 0x20	; 32
 8fa:	80 61       	ori	r24, 0x10	; 16
 8fc:	80 bd       	out	0x20, r24	; 32
 8fe:	80 b5       	in	r24, 0x20	; 32
 900:	80 62       	ori	r24, 0x20	; 32
 902:	80 bd       	out	0x20, r24	; 32
 904:	09 c0       	rjmp	.+18     	; 0x918 <__stack+0xb9>
 906:	80 b5       	in	r24, 0x20	; 32
 908:	80 68       	ori	r24, 0x80	; 128
 90a:	80 bd       	out	0x20, r24	; 32
 90c:	80 b5       	in	r24, 0x20	; 32
 90e:	8f 7e       	andi	r24, 0xEF	; 239
 910:	80 bd       	out	0x20, r24	; 32
 912:	80 b5       	in	r24, 0x20	; 32
 914:	80 62       	ori	r24, 0x20	; 32
 916:	80 bd       	out	0x20, r24	; 32
 918:	84 81       	ldd	r24, Z+4	; 0x04
 91a:	88 23       	and	r24, r24
 91c:	19 f0       	breq	.+6      	; 0x924 <__stack+0xc5>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	41 f0       	breq	.+16     	; 0x932 <__stack+0xd3>
 922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
 924:	80 b5       	in	r24, 0x20	; 32
 926:	80 68       	ori	r24, 0x80	; 128
 928:	80 bd       	out	0x20, r24	; 32
 92a:	80 b5       	in	r24, 0x20	; 32
 92c:	87 7f       	andi	r24, 0xF7	; 247
 92e:	80 bd       	out	0x20, r24	; 32
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0xdf>
 932:	80 b5       	in	r24, 0x20	; 32
 934:	80 68       	ori	r24, 0x80	; 128
 936:	80 bd       	out	0x20, r24	; 32
 938:	80 b5       	in	r24, 0x20	; 32
 93a:	88 60       	ori	r24, 0x08	; 8
 93c:	80 bd       	out	0x20, r24	; 32
 93e:	80 81       	ld	r24, Z
 940:	88 23       	and	r24, r24
 942:	19 f0       	breq	.+6      	; 0x94a <__stack+0xeb>
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	41 f0       	breq	.+16     	; 0x958 <__stack+0xf9>
 948:	0d c0       	rjmp	.+26     	; 0x964 <__stack+0x105>
 94a:	80 b5       	in	r24, 0x20	; 32
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	80 bd       	out	0x20, r24	; 32
 950:	80 b5       	in	r24, 0x20	; 32
 952:	8f 7b       	andi	r24, 0xBF	; 191
 954:	80 bd       	out	0x20, r24	; 32
 956:	06 c0       	rjmp	.+12     	; 0x964 <__stack+0x105>
 958:	80 b5       	in	r24, 0x20	; 32
 95a:	80 68       	ori	r24, 0x80	; 128
 95c:	80 bd       	out	0x20, r24	; 32
 95e:	80 b5       	in	r24, 0x20	; 32
 960:	80 64       	ori	r24, 0x40	; 64
 962:	80 bd       	out	0x20, r24	; 32
 964:	85 81       	ldd	r24, Z+5	; 0x05
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	a1 f0       	breq	.+40     	; 0x992 <__stack+0x133>
 96a:	28 f0       	brcs	.+10     	; 0x976 <__stack+0x117>
 96c:	82 30       	cpi	r24, 0x02	; 2
 96e:	09 f1       	breq	.+66     	; 0x9b2 <__stack+0x153>
 970:	83 30       	cpi	r24, 0x03	; 3
 972:	79 f1       	breq	.+94     	; 0x9d2 <__stack+0x173>
 974:	3d c0       	rjmp	.+122    	; 0x9f0 <__stack+0x191>
 976:	8a b1       	in	r24, 0x0a	; 10
 978:	8f 77       	andi	r24, 0x7F	; 127
 97a:	8a b9       	out	0x0a, r24	; 10
 97c:	8a b1       	in	r24, 0x0a	; 10
 97e:	8f 7b       	andi	r24, 0xBF	; 191
 980:	8a b9       	out	0x0a, r24	; 10
 982:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <GP_IRQ_CallBack+0x1>
 986:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <GP_IRQ_CallBack>
 98a:	8f b7       	in	r24, 0x3f	; 63
 98c:	8f 77       	andi	r24, 0x7F	; 127
 98e:	8f bf       	out	0x3f, r24	; 63
 990:	2f c0       	rjmp	.+94     	; 0x9f0 <__stack+0x191>
 992:	8a b1       	in	r24, 0x0a	; 10
 994:	8f 77       	andi	r24, 0x7F	; 127
 996:	8a b9       	out	0x0a, r24	; 10
 998:	8a b1       	in	r24, 0x0a	; 10
 99a:	80 64       	ori	r24, 0x40	; 64
 99c:	8a b9       	out	0x0a, r24	; 10
 99e:	86 81       	ldd	r24, Z+6	; 0x06
 9a0:	97 81       	ldd	r25, Z+7	; 0x07
 9a2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GP_IRQ_CallBack+0x1>
 9a6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GP_IRQ_CallBack>
 9aa:	8f b7       	in	r24, 0x3f	; 63
 9ac:	80 68       	ori	r24, 0x80	; 128
 9ae:	8f bf       	out	0x3f, r24	; 63
 9b0:	1f c0       	rjmp	.+62     	; 0x9f0 <__stack+0x191>
 9b2:	8a b1       	in	r24, 0x0a	; 10
 9b4:	80 68       	ori	r24, 0x80	; 128
 9b6:	8a b9       	out	0x0a, r24	; 10
 9b8:	8a b1       	in	r24, 0x0a	; 10
 9ba:	8f 7b       	andi	r24, 0xBF	; 191
 9bc:	8a b9       	out	0x0a, r24	; 10
 9be:	86 81       	ldd	r24, Z+6	; 0x06
 9c0:	97 81       	ldd	r25, Z+7	; 0x07
 9c2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GP_IRQ_CallBack+0x1>
 9c6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GP_IRQ_CallBack>
 9ca:	8f b7       	in	r24, 0x3f	; 63
 9cc:	80 68       	ori	r24, 0x80	; 128
 9ce:	8f bf       	out	0x3f, r24	; 63
 9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <__stack+0x191>
 9d2:	8a b1       	in	r24, 0x0a	; 10
 9d4:	80 68       	ori	r24, 0x80	; 128
 9d6:	8a b9       	out	0x0a, r24	; 10
 9d8:	8a b1       	in	r24, 0x0a	; 10
 9da:	80 64       	ori	r24, 0x40	; 64
 9dc:	8a b9       	out	0x0a, r24	; 10
 9de:	86 81       	ldd	r24, Z+6	; 0x06
 9e0:	97 81       	ldd	r25, Z+7	; 0x07
 9e2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <GP_IRQ_CallBack+0x1>
 9e6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <GP_IRQ_CallBack>
 9ea:	8f b7       	in	r24, 0x3f	; 63
 9ec:	80 68       	ori	r24, 0x80	; 128
 9ee:	8f bf       	out	0x3f, r24	; 63
 9f0:	8a b1       	in	r24, 0x0a	; 10
 9f2:	80 61       	ori	r24, 0x10	; 16
 9f4:	8a b9       	out	0x0a, r24	; 10
 9f6:	8a b1       	in	r24, 0x0a	; 10
 9f8:	88 60       	ori	r24, 0x08	; 8
 9fa:	8a b9       	out	0x0a, r24	; 10
 9fc:	08 95       	ret

000009fe <MCAL_UART_SendData>:
 9fe:	66 23       	and	r22, r22
 a00:	11 f0       	breq	.+4      	; 0xa06 <MCAL_UART_SendData+0x8>
 a02:	5d 9b       	sbis	0x0b, 5	; 11
 a04:	fe cf       	rjmp	.-4      	; 0xa02 <MCAL_UART_SendData+0x4>
 a06:	52 9b       	sbis	0x0a, 2	; 10
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <MCAL_UART_SendData+0x16>
 a0a:	9a b1       	in	r25, 0x0a	; 10
 a0c:	9e 7f       	andi	r25, 0xFE	; 254
 a0e:	9a b9       	out	0x0a, r25	; 10
 a10:	8c b9       	out	0x0c, r24	; 12
 a12:	08 95       	ret
 a14:	8c b9       	out	0x0c, r24	; 12
 a16:	08 95       	ret

00000a18 <MCAL_UART_ReceiveData>:
 a18:	88 23       	and	r24, r24
 a1a:	11 f0       	breq	.+4      	; 0xa20 <MCAL_UART_ReceiveData+0x8>
 a1c:	5f 9b       	sbis	0x0b, 7	; 11
 a1e:	fe cf       	rjmp	.-4      	; 0xa1c <MCAL_UART_ReceiveData+0x4>
 a20:	52 9b       	sbis	0x0a, 2	; 10
 a22:	08 c0       	rjmp	.+16     	; 0xa34 <MCAL_UART_ReceiveData+0x1c>
 a24:	2a b1       	in	r18, 0x0a	; 10
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	21 fb       	bst	r18, 1
 a2a:	99 27       	eor	r25, r25
 a2c:	90 f9       	bld	r25, 0
 a2e:	2c b1       	in	r18, 0x0c	; 12
 a30:	82 2b       	or	r24, r18
 a32:	08 95       	ret
 a34:	8c b1       	in	r24, 0x0c	; 12
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	08 95       	ret

00000a3a <__vector_13>:
		}
	}
}

ISR(USART_RXC_vect)
{
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
 a44:	2f 93       	push	r18
 a46:	3f 93       	push	r19
 a48:	4f 93       	push	r20
 a4a:	5f 93       	push	r21
 a4c:	6f 93       	push	r22
 a4e:	7f 93       	push	r23
 a50:	8f 93       	push	r24
 a52:	9f 93       	push	r25
 a54:	af 93       	push	r26
 a56:	bf 93       	push	r27
 a58:	ef 93       	push	r30
 a5a:	ff 93       	push	r31
	GP_IRQ_CallBack();
 a5c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 a60:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 a64:	09 95       	icall
}
 a66:	ff 91       	pop	r31
 a68:	ef 91       	pop	r30
 a6a:	bf 91       	pop	r27
 a6c:	af 91       	pop	r26
 a6e:	9f 91       	pop	r25
 a70:	8f 91       	pop	r24
 a72:	7f 91       	pop	r23
 a74:	6f 91       	pop	r22
 a76:	5f 91       	pop	r21
 a78:	4f 91       	pop	r20
 a7a:	3f 91       	pop	r19
 a7c:	2f 91       	pop	r18
 a7e:	0f 90       	pop	r0
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	0f 90       	pop	r0
 a84:	1f 90       	pop	r1
 a86:	18 95       	reti

00000a88 <__vector_15>:

ISR(USART_TXC_vect)
{
 a88:	1f 92       	push	r1
 a8a:	0f 92       	push	r0
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	0f 92       	push	r0
 a90:	11 24       	eor	r1, r1
 a92:	2f 93       	push	r18
 a94:	3f 93       	push	r19
 a96:	4f 93       	push	r20
 a98:	5f 93       	push	r21
 a9a:	6f 93       	push	r22
 a9c:	7f 93       	push	r23
 a9e:	8f 93       	push	r24
 aa0:	9f 93       	push	r25
 aa2:	af 93       	push	r26
 aa4:	bf 93       	push	r27
 aa6:	ef 93       	push	r30
 aa8:	ff 93       	push	r31
	GP_IRQ_CallBack();
 aaa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 aae:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 ab2:	09 95       	icall
 ab4:	ff 91       	pop	r31
 ab6:	ef 91       	pop	r30
 ab8:	bf 91       	pop	r27
 aba:	af 91       	pop	r26
 abc:	9f 91       	pop	r25
 abe:	8f 91       	pop	r24
 ac0:	7f 91       	pop	r23
 ac2:	6f 91       	pop	r22
 ac4:	5f 91       	pop	r21
 ac6:	4f 91       	pop	r20
 ac8:	3f 91       	pop	r19
 aca:	2f 91       	pop	r18
 acc:	0f 90       	pop	r0
 ace:	0f be       	out	0x3f, r0	; 63
 ad0:	0f 90       	pop	r0
 ad2:	1f 90       	pop	r1
 ad4:	18 95       	reti

00000ad6 <__tablejump2__>:
 ad6:	ee 0f       	add	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	05 90       	lpm	r0, Z+
 adc:	f4 91       	lpm	r31, Z
 ade:	e0 2d       	mov	r30, r0
 ae0:	09 94       	ijmp

00000ae2 <_exit>:
 ae2:	f8 94       	cli

00000ae4 <__stop_program>:
 ae4:	ff cf       	rjmp	.-2      	; 0xae4 <__stop_program>
